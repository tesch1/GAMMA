###############################################################################
#                                                                             #
#                                 G A M M A                                   #
#               Makefile For The GAMMA MR Simulation Platform                 #
#                      Copyright © 1999 Scott A. Smith                        #
#                  National High Magnetic Field Laboratory                    #
#                         1800 E. Paul Dirac Drive                            #
#                     Tallahassee, FL, USA 32307-4005                         #
#                          ssmith@magnet.fsu.edu                              #
#                      On WWW See gamma.magnet.fsu.edu                        #
#                                                                             #
# =========================================================================== #
#                                                                             #
# Quick Info: 1.) Builds object files & library for a single GAMMA library.   #
#                 THIS DOES THE BULK OF THE WORK IN COMPILING GAMMA.          #
#             2.) Included in each module's Makefile                          #
#             3.) Must be supplied with the following variables:              #
#                a. FNAMES     The base name of all module source files.      #
#                b. MODULEDIR  The name of the module directory (full path).  #
#                c. LIB        Directory where binaries will be placed.       #
#                d. CXX        Command to invoke C++ compiler.                #
#                e. C++FLAGS   Flags used when invoking the C++ compiler      #
#		 f. MTRACK     Flag if makefile tracking desired              #
#                g. AR         Archiving program for building libraries       #
#                h. ARFLAGS:   Archiving program flags                        #
#                i. LIBNAME:   Name of library to be built from .o files      #
#                j. LIBNAMEP:  Name of library to be built from _p.o files    #
#             4.) Provides the following patterns:                            #
#                a. $(LIB)/%.o: $(MODULEDIR)/%.cc    { .o <---- .cc }         #
#                b. $(LIB)/%_p.o: $(MODULEDIR)/%.cc  { .o <---- .cc, profile }#
#                c. $(LIB)/$(LIBNAME): $(MODOFILES)  { lib <--- .o }          #
#                d. $(LIB)/$(LIBNAMEP): $(MODOFILES) { lib <--- .o, profile } #
#             5.) Provides the following targets:                             #
#                x. buildvars  Display all variable settings used in makefile #  
#                                                                             #
# =========================================================================== #
#                                                                             #
# The concern of this Makefile is GAMMA module compilation from source code.  #
# Typically binary object files (*.o) for all source files (*.cc) in a        #
# particular GAMMA module will be generated using a specified C++ compiler    #
# and any indicated compiler flags.  Since these object files are specific    #
# for a computer architecture and compiler, they are placed into an directory #
# that is both architecture and compiler specific.  Then, if desired, the     #
# object files will be placed into a module library which can be linked to    #
# when building GAMMA programs.                                               #
#                                                                             #
# Additional facets include the generation of statically versus dynamically   #
# linked libraries, generation of one large library for all of GAMMA (from    #
# the main GAMMA Makefile), and use of RCS checkout to maintain the source    #
# files so they are the most recent during any builds.                        #
#                                                                             #
# Individual module Makefiles, $(GAMMAVER)/$(SRCDIR)/$(MODULE)/Makefile, will #
# directly include this file.  Thus, all GAMMA modules share the same targets #
# when building object files and libraries.  Changing this file affects all   #
# modules simultaneously.  Use care when altering anything herein. Do not     #
# confuse this file with a similarly named file that handles compilation for  #
# all of GAMMA.  They are very different!  That file is included in the main  #
# GAMMA makefile, $(GAMMAVER)/Makefile, and will recurse through the modules  #
# during builds. Since each module includes this file, the main Makefile will #
# actually use this file several times during a GAMMA compilation!            #  
#                                                                             #
# Users are free to copy this file for personal use but may NOT give out      #
# modifications with or without the GAMMA platform.  The GAMMA Basics module  #
# source distrubution is typically packaged with the full GAMMA source        #
# distribution.  The full src distrubution and one for just the Basics module #
# which may be obtained from the GAMMA WWW site above or any of its mirrors.  #
#                                                                             #
###############################################################################

###############################################################################
###############################################################################
############################# VARIABLES ARE BELOW #############################
###############################################################################
###############################################################################

###############################################################################
#                                                                             #
#           OVERALL VARIABLES CONCEPT & MANDATORY EXTERNAL VARIABLES          #  
#                                                                             #
# Since the intent of this makefile is to simply be included into module      #  
# makefiles that handle module source compilations, it does NOT add in any    #
# variables required by these other makefiles, it only adds in make targets.  #
# The added targets are for compilation of a GAMMA module from sources into   #
# binary objects and for linking the binary objects into a library.           #
#                                                                             #
# Although this Makefile provides no variables, it does however require that  #
# some variables be set before its targets are used. It will make some        #
# variables to use for its own convenience. DO NOT use any of the variables   #
# defined herein in any other makefiles. One must simply insure that any of   #
# the required external variables have been specified prior to running any    #
# targets defined herein. Thus the module Makefile, typically this will be    #
# $(GAMMAVER)/$(SRC)/$(MODULE)/Makefile, must supply all required external    #
# variables. Here is what we will need defined in these makefiles:            #  
#                                                                             #
# FNAMES:    The base name of all module source files. These will be raw      #
#            names without any extension (i.e. no .cc or .h)                  #
# MODULEDIR: The name of the module directory. This will be a full path.      #
#            For example /gamma3/temp/gamma-4.0.7/src/Basics                  #
# LIB:       Full path name where object files are stored or will be placed.  #
#            For example /gamma3/temp/gamma-4.0.7/sparc-sun-solaris2.6        #
# CXX:       The command to invoke the systems C++ compiler, e.g. gcc or CC   #
# C++FLAGS:  Flags to use when invoking the C++ compiler, e.g. -g             #
#                                                                             #
###############################################################################

###############################################################################
#                                                                             #
#                            CONVENIENCE VARIABLES                            #  
#                                                                             #
# These variables are built from those defined above. They are only needed in #
# this makefile and only created to simplify the targets herein defined. The  #
# starred names are those which are only used in SOLO mode. DO NOT use any    #  
# of these variable in any other makefile.                                    #
#                                                                             #
# RAWCCFILES:  These are the names of the .cc files that will be compiled.    #
#              these will be the names in FNAMES with a .cc added on.         #
# RAWOFILES:   These are the names of the .o files that will be generated     #
#              when the .cc files are compiled. These will be the names in    #
#              FNAMES with a .o added on.                                     #
# MODOFILES:   Object files that are produced during module compilation or    #
#              included into the module library. These have FULL PATH names.  #
# MODOPFILES:  Object files that are produced during module compilation with  #
#              profiling or those included into the module library with       #
#              profiling. These will have FULL PATH names.                    #
# MODSOFILES:  Object files that are produced during module shared            #
#              compilaton or included into the shared module library. These   #
#              have FULL PATH names.                                          #
# MODSOPFILES: Object files that are produced during module compilation with  #
#              shared profiling or those included into the module library     #
#              with shared profiling. These will have full path names.        #
#                                                                             #
###############################################################################

RAWCCFILES   = $(addsuffix .cc, $(FNAMES))
RAWOFILES    = $(addsuffix .o,  $(FNAMES))
MODOFILES    = $(addsuffix .o, $(addprefix $(LIB)/, $(FNAMES)))
MODOPFILES   = $(addsuffix _p.o, $(addprefix $(MODULEDIR)/, $(FNAMES)))

###############################################################################
###############################################################################
############################## PATTERNS ARE BELOW #############################
###############################################################################
###############################################################################

###############################################################################
#                                                                             #
#                        OBJECT FILES FROM SOURCE FILES                       #
#                                                                             #
#                   Pattern: $(LIB)/file.o <-- $(SRCDIR)/file.cc              #
#                                                                             #
# The following patterns dictate how to generate object files in the GAMMA    #
# library directory from C++ source files which are in the local directory.   #
# If the object files are older than the source files then they are remade    #
# by compiling the source code file.  A few more notes here:                  #
#                                                                             #
# 1. The library directory name depends on the computer architecture.         #
#    Typically this will reside at $(GAMMAVER)/$(ARCH)/ where $(ARCH) is      #
#    specific for the system being worked on. Variable $(LIB) is the path.    #
# 2. The source directory is the module directory. Each module contains its   #
#    own sources, they are $(GAMMAVER)/$(SRCDIR)/$(MODULE)/*.cc               #
# 3. The compilation is typically done  using the specified C++ compiler in   #
#    $(CXX) and compiler flags in $(C++FLAGS). The flag -c is also used to    #
#    indicate that an object file is to be produced (not an executable).      #
#    During compiling a module, any libraries currently in $(LIB) are         #
#    accessible for linking.                                                  #
#                                                                             #
# Required Variables:                                                         #
#                                                                             #
# LIB:      Full path name where object files are stored or will be placed.   #
#           For example /gamma3/temp/gamma-4.0.7/sparc-sun-solaris2.6         #
#           Must be defined outside of this makefile.                         #
# MODULEDIR:Full path name where the module source files are stored.          #
#           For example /gamma3/temp/gamma-4.0.7/src/Basics                   #
#           Must be defined outside of this makefile.                         #
# CXX:      The command to invoke the systems C++ compiler, e.g. gcc or CC    #
#           Must be defined outside of this makefile.                         #
# C++FLAGS: Flags to use when invoking the C++ compiler, e.g. -g              #
#           Must be defined outside of this makefile.                         #
# MTRACK:   Used to invoke more detailed output tracking the makefile.        #
#                                                                             #
# Note: GNU MAKE will automatically scan $(MODULEDIR)/$(RCS) and check out a  #
#       source file if not present in the MODULEDIR directory. Applicable if  #
#       you have an RCS directory, that is, if you are developing GAMMA.      #
# Note: The second version of this target supports profiling.  All it does    #
#       differently is to add "_p" to the produced object file names and      #
#       include profiling and debugging (-p & -g) during source compilation.  #
# Note: This is NOT discriminating. It will take any .cc file in the module   #
#       directory and generate the corresponding object file in the library   #
#       directory.                                                            #
#                                                                             #
###############################################################################

$(LIB)/%.o: $(MODULEDIR)/%.cc
	@if (test ! -z $(MTRACK)) \
	then echo "        * MakeModBuild Pattern .o <--- .cc"; \
	fi
	@echo "        * Compiling $<"
	@echo "          To Produce Object File $@"
	@$(CXX) -c $(C++FLAGS) -DLIBDIR=\"$(LIB)/\" $< -o $@
	@-chmod ug+w $@
 
$(LIB)/%_p.o: $(MODULEDIR)/%.cc
	@if (test ! -z $(MTRACK)) \
	then echo "        * MakeModBuild Pattern .o <--- .cc"; \
	fi
	@echo "        * Compiling $<"
	@echo "          To Produce Object File $@"
	@$(CXX) -c $(C++FLAGS) -DLIBDIR=\"$(LIB)/\" -pg $< -o $@
	@-chmod ug+w $@

###############################################################################
#                                                                             #
#                       MODULE LIBRARY FROM OBJECT FILES                      #
#                                                                             #
#               Pattern: $(LIB)/$(LIBNAME) <--  $(LIB)/{file.o}               #
#                                                                             #
# The following pattern dictates how to generate the module library in the    #
# GAMMA library directory from object files in the library directory $(LIB)   #
# If the library file $(LIB)/$(LIBNAME) is older than the object files any    #
# existing library will be deleted and the library rebuilt.  Since the object #
# files $(MODOFILES) depend on the source files (see above pattern), if the   #
# object files are are older than the source files then they are remade       #
# before the library is made.  A few more notes here:                         #
#                                                                             #
# 1. The library directory name dependends on the computer architecture.      #
#    Typically this will reside at $(GAMMAVER)/$(ARCH)/ where $(ARCH) is      #
#    specific for the system being worked on. Variable $(LIB) is the path.    #
# 2. The library is built static here, using the archiving program $(AR).     #
#                                                                             #
# The following variables MUST be defined for this to work:                   #
#                                                                             #
# LIB:        Directory for computer specific libraries & object files        #
#             For example /gamma3/temp/gamma-4.0.7/sparc-sun-solaris2.6       #
#             Should exist in the Makefile calling this                       #
# LIBNAME:    Name of static module library to be built, e.g. libBasics.a     #
#             Should exist in the Makefile calling this                       #
# LIBNAMEP:   Name of static module library to be built, e.g. libBasics_p.a   #
#             Should exist in the Makefile calling this                       #
# MODCCFILES: Module source files that are compiled into object files.        #
#             This is produced in this makefile from FNAMES                   # 
# MODOFILES:  Object files that are produced during module compilation or     #
#             included into the module library. These have full path names.   #
#             This is produced in this makefile from FNAMES                   # 
# MODOPFILES: Object files that are produced during module compilation with   #
#             profiling or those included into the module library with        #
#             profiling. These will have full path names.                     #
#             This is produced in this makefile from FNAMES                   # 
# MTRACK:     Used to invoke more detailed output tracking the makefile.      #
#             Should exist in the Makefile calling this                       #
# AR:         Archiving program for building libraries                        #
#             Should exist in the Makefile calling this                       #
# ARFLAGS:    Archiving program flags                                         #
#             Should exist in the Makefile calling this                       #
#                                                                             #
# Note: The second version of this pattern supports profiling.  All it does   #
#       differently is to use the object files which have "_p" appended to    #
#       their names so that the library, now $(LIBNAMEP), allows profiling.   #
#                                                                             #
###############################################################################

$(LIB)/$(LIBNAME): $(MODOFILES)
	@if (test ! -z $(MTRACK)) \
	then echo "        * MakeModBuild Pattern ${LIBNAME} <--- .o Files"; \
	fi
	@if (test -f $(LIB)/$(LIBNAME)) \
	then \
	  echo "        * First Removing The Current Existing Library"; \
	  rm -f $(LIB)/$(LIBNAME); \
        fi
	@echo "        * Generating New Library $(LIB)/$(LIBNAME)"
	@$(AR) $(ARFLAGS) $@ $(MODOFILES)
	@if (test ! -f $(LIB)/$(LIBNAME)) \
	then \
	  echo "        * CANNOT FIND LIBRARY $(LIB)/$(LIBNAME)?"; \
	  echo "        * MAKE PROBLEMS. THIS SHOULD NOT OCCUR..."; \
          break; \
        fi
	@echo "        * Setting Write Access On $(LIB)/$(LIBNAME)";
	@-chmod ug+w $(LIB)/$(LIBNAME)

$(LIB)/$(LIBNAMEP): $(MODOPFILES)
	@if (test ! -z $(MTRACK)) \
	then echo "        * MakeModBuild Pattern ${LIBNAMEP} <--- .o Files"; \
	fi
	@if (test -f $(LIB)/$(LIBNAMEP)) \
	then \
	  echo "        * First Removing The Current Existing Library"; \
	  rm -f $(LIB)/$(LIBNAMEP); \
        fi
	@echo "        * Generating New Library $(LIB)/$(LIBNAMEP)"
	@$(AR) $(ARFLAGS) $@ $(MODOFILES)
	@if (test ! -f $(LIB)/$(LIBNAMEP)) \
	then \
	  echo "        * CANNOT FIND LIBRARY $(LIB)/$(LIBNAMEP)?"; \
	  echo "        * MAKE PROBLEMS. THIS SHOULD NOT OCCUR..."; \
          break; \
        fi
	@echo "        * Setting Write Access On $(LIB)/$(LIBNAMEP)";
	@-chmod ug+w $(LIB)/$(LIBNAMEP)

###############################################################################
###############################################################################
############################## TARGETS ARE BELOW ##############################
###############################################################################
###############################################################################

###############################################################################
#                                                                             #
#                           OBJECT FILE BUILDING TARGETS                      #
#                                                                             #
# These targets will compile module source codes and produce binary object    #
# files. There are a few means to do this. First, one may wish to have        #
# profiling turned on. Although that could easily be accomplished by changing #
# the compiler flags (C++Flags), but then the resulting object files will     #
# overwrite the non-profiled ones. In contrast, we allow for generation of an #
# entirely different set of object files (*_p.o rather than *.o) so that one  #
# can simultaneously have both profiled and non-profiled libraries.           #
#                                                                             #
# buildobj:  Compilation of module source files (statically, no profiling).   #
# buildobjp: Compilation of module source files (statically, profiling).      #
#                                                                             #
###############################################################################

buildobj:  $(MODOFILES)
buildobjp: $(MODOPFILES)

###############################################################################
#                                                                             #
#                            LIBRARY BUILDING TARGETS                         #
#                                                                             #
# The targets in this section are they which will compile GAMMA source codes  #
# for a single module and generate a module library.                          #
#                                                                             #
#                              Target: buildlibs                              #
#                                                                             #
# MODNAME:     Name of module running the make. This will be declared in the  #
#              module Makefile prior to importing this target.                #  
# LIB:         Full path name where object files are stored or will be placed #
#              For example /gamma3/temp/gamma-4.0.7/sparc-sun-solaris2.6      #
# NPD:         Direct print supression flag (--no-print-directory). This will #
#              be defined in generic file $GAMMAVER/$MAKE/MakeGam but that    #
#              definition will only be used when running NONSOLO. If SOLO the #
#              definition of NPD will stem from the definition in this file.  #
#                                                                             #
# statmodlib:  Forces a build of the static module library.                   #
# statmodlibp: Forces a build of the static module library with profiling.    #
# sharmodlib:  Forces a build of the shared module library.                   #
# sharmodlibp: Forces a build of the shared module library with profiling.    #
#                                                                             #
# Note - The "modlib" targets leave a lot ot be desired since the will force  #
#        a build of the libraries regardless if they are up to date or not.   #
# Note - The profiled libraries can be made from the "non-profiled" targets   #
#        if the compiler flags have been set for it. This is not done by      #
#        default so that profiled libraries are named differented from others #
#                                                                             #
###############################################################################

#buildlib: $(LIB)/$(LIBNAME)
buildlib: force 
	@echo "      * Building $(MODNAME) Module Static Library $(LIBNAME)"
	@$(MAKE) $(NPD) $(LIB)/$(LIBNAME)
#	$(MAKE) $(LIB)/$(LIBNAME) $(MODOFILES) $(MODCCFILES)

#sosi

statmodlib: force  
	@echo "   * Building $(MODNAME) Module Static Library $(LIBNAME)"
	@if (test -f $(LIB)/$(LIBNAME)) \
	then \
	  echo "   * Removing Current Existing Library"; \
          rm -f $(LIB)/$(LIBNAME);\
        fi
	@$(MAKE) $(NPD) buildobj
	@echo "   * Generating New Library";
	@$(AR) $(ARFLAGS) $(LIB)/$(LIBNAME) $(MODOFILES)
	@echo "   * Setting Write Access On Library";
	@-chmod ug+w $(LIB)/$(LIBNAME)

###############################################################################
#                                                                             #
#                              Target: buildclean                             #
#                                                                             #
# MODNAME:    Name of module running the make. This will be declared in the   #
#             module Makefile prior to importing this target.                 #  
# MODOFILES:  Object files that are produced during module compilation or     #
#             included into the module library. These have full path names.   #
# MODOPFILES: Object files that are produced during module compilation with   #
#             profiling or those included into the module library with        #
#             profiling. These will have full path names.                     #
# MODSOFILES: Object files that are produced during module shared compilation #
#             or included into the shared module library. These have full     #
#             path names.                                                     #
# MODSOPFILES:Object files that are produced during module compilation with   #
#             shared profiling or those included into the module library with #
#             shared profiling. These will have full path names.              #
#                                                                             #
###############################################################################

statomodclean: force  
	@if (test ! -z $(MTRACK)) \
	then echo "        * MakeModBuild Target statomodclean"; \
        fi
	@echo "   * Deleting $(MODNAME) Module Static Library Build Object Files"
	@rm -rf $(MODOFILES)

statomodcleanp: force  
	@if (test ! -z $(MTRACK)) \
	then echo "        * MakeModBuild Target statomodcleanup"; \
        fi
	@echo "   * Deleting $(MODNAME) Module Profiled Static Library Build Object Files"
	@rm -rf $(MODOPFILES)

sharomodclean: force  
	@if (test ! -z $(MTRACK)) \
	then echo "        * MakeModBuild Target sharomodclean"; \
        fi
	@echo "   * Deleting $(MODNAME) Module Shared Library Build Object Files"
	@rm -rf $(MODSOFILES)

sharomodcleanp: force  
	@if (test ! -z $(MTRACK)) \
	then echo "        * MakeModBuild Target sharomodcleanup"; \
        fi
	@echo "   * Deleting $(MODNAME) Module Profiled Shared Library Build Object Files"
	@rm -rf $(MODSOPFILES)

###############################################################################
#                                                                             #
#                              Target: buildvars                              #
#                                                                             #
# During a GAMMA compilation object files, library files and directories are  #  
# created and destroyed. This can be dangerous if some variables in the       #  
# Makefile are improperly set. At the vary least, the different targets will  #
# not work. At worst, important files are destroyed.  This target will simply #
# spit out all of the variables that are overtly used in this makefile. This  #
# way one can have a look if things appear proper prior to running anything   #
# that does file/directory manipulations. This target is not normally run by  #
# a GAMMA user, it is more useful in building makefiles and debugging them.   #
#                                                                             #
# NOTSOLO:     Flag whether makefile is running independently or being driven #
#              by the main GAMMA makefile. This will be set by the main GAMMA #
#              makefile (in PASSFLGS) or not if running SOLO.                 #  
# MODLABEL:    Name of module running the make. This will be declared in the  #
#              module Makefile prior to importing this target.                #  
# MODLABUN:    Underline of module name for module running the make. This     #  
#              will be declared in the  module Makefile prior to including    #
#              this target.                                                   #
# SRCDIR:      The GAMMA source directory name (e.g. src), in MakeGam         #  
# DIRNAME:     The module directory name (e.g. Basics, Matrix, ...) Set in    #  
#              makefile that includes this one ($GAMMA/src/$MODULE/Makefile)  #
# PROJECTPATH: The full directory name of the GAMMA project (version). This   #
#              will have been set to empty above but will be set to some      #
#              other value if being run recursively.                          #
# MODULEDIR:   Name of module directory to be copied. Set above in this file. #
# COPY2BASE:   Serves as the point just below where the copied source         #
#              directory will reside. For a SOLO distribution of a single     #
#              module that will be ".", but for a larger source distribution  #
#              this will be a full path to a copied GAMMA directory.          #
# COPY2DIR:    Directory where the copied module source files will be placed. #
# FNAMES:      Test source file base names to be included in the module test  #
#              distribution. These names will have a .cc appended to them and #
#              they should reside in the module directory.                    #
# TARFILE:     Tar file name, that produced upon source distribution of this  #
#              specific module. Only used if running SOLO.                    #
# ZIPFILE:     Zip file name, that produced upon source distribution of this  #
#              of this specific module. Only used if running SOLO.            #
# SRCDIR       The source directory (local to GAMMAVER, e.g. src)             #
# PASSFLGS:    The flags that are passed from the main GAMMA makefile during  #  
#              recursion into this file. If running SOLO then this is set to  #
#              be an empty string (done earlier in this makefile)             #
#                                                                             #
###############################################################################

buildvars:   
	@echo ""
	@echo "      Variables Used ${MODLABEL} Module Source Compilation Makefile"
	@echo
	@if (test -z $(NOTSOLO)) \
	then \
          echo "  NOTSOLO       Make Being Run Directly            = $(NOTSOLO)"; \
	else \
          echo "  NOTSOLO       Make Being Run Recursively         = $(NOTSOLO)"; \
        fi
	@echo "  MODLABEL      The Module Label for Output        = $(MODLABEL)"
	@echo "  MODLABUN      The Module Label Underline Output  = $(MODLABUN)"
	@echo "  MODULEDIR     Module Full Directory Name         = $(MODULEDIR)"
	@echo "  GVERDIR       The GAMMA Version Directory Name   = $(GVERDIR)"
	@echo "  SRCDIR        The GAMMA Src Directory Name       = $(SRCDIR)"
	@echo "  MODULEDIR     The GAMMA Module Directory Name    = $(MODULEDIR)"
	@for i in $(MODCCFILES); do \
	echo "  MODCCFILES    Source File To Compile             = $$i"; \
	done
	@for i in $(MODOFILES); do \
	echo "  MODCCFILES    Object File From Compilation       = $$i"; \
	done
	@echo "  CXX           The C++ Compiler Command           = $(CXX)"
	@echo "  C++FLAGS      The C++ Compiler FLAGS             = $(C++FLAGS)"
	@echo "  GC++FLAGS     The C++ Compiler FLAGS For GAMMA   = $(GC++FLAGS)"
	@echo
