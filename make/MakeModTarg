###############################################################################
#                                                                             #
#               Makefile For The GAMMA MR Simulation Platform                 #
#                     Copyright (C) 1999 Scott A. Smith                       #
#                  National High Magnetic Field Laboratory                    #
#                         1800 E. Paul Dirac Drive                            #
#                     Tallahassee, FL, USA 32306-4005                         #
#                          ssmith@magnet.fsu.edu                              #
#                      On WWW See gamma.magnet.fsu.edu                        #
#                                                                             #
# =========================================================================== #
#                                                                             #
# Quick Info: 1.) Included in GAMMA Module's Generic Makefile.                #
#             2.) Adds targets for module builds.                             #
#             3.) Recursively called from the GAMMA main makefile per module. #
#                                                                             #
# =========================================================================== #
#                                                                             #
# The concern of this Makefile is GAMMA compilation and distribution. Herein  #
# are define generic targets that are used for such purposes.                 #
#                                                                             #
# Users are free to copy this file for personal use but may NOT give out      #
# modifications with or without the GAMMA platform.  The GAMMA Basics module  #
# source distrubution is typically packaged with the full GAMMA source        #
# distribution.  The full src distrubution and one for just the Basics module #
# which may be obtained from the GAMMA WWW site above or any of its mirrors.  #
#                                                                             #
###############################################################################

###############################################################################
#                                                                             #
#         The Target "all" Is Intended To Perform The Following Steps	      #
#                                                                             #
# 1. Create Directories "ARCHDIR", and "LIB" If Not Yet Existing              #
# 2. Change These Directories So Than Group Members Have Write Priviliges     #
# 3. Build The GAMMA Basics Library and Put It In "LIB"	                      #
#                                                                             #
# The following variables MUST/SHOULD be defined for this to work:            #
#                                                                             #
# - MTRACK:   Flag indicating whether to track Makefile targets               #
# - MODLABEL: Label of current module                                         #
# - MODLABUN: Label of current module underline                               #
# - BUILDF:   Flag if current module is to be built at all                    #
# - ARCHDIR:  Unique directory for specific computer architecture             #
# - LIB:      Library directory of computer specific libraries & object files #
# - MAKE:     The make program being used                                     #
# - LIBNAME:  The library name to be produced                                 #
#                                                                             #
# Note that this target depends on $(LIB)/$(LIBNAME) so it first tries that   #
# to insure it is also up to date. See the next target for specifics.	      #
#                                                                             #
###############################################################################
 
all: 	
	@if (test ! -z $(MTRACK)) \
	  then echo "                    MakeModTarg Target all"; \
        fi
	@echo ""
	@echo "                 Compiling $(MODLABEL) Module"
	@echo "                 ----------$(MODLABUN)-------"
	@${MAKE} allblurb
	@${MAKE} alldirs
	@if (test -z $(BUILDF)) \
	then \
	  echo "    Skipping $(MODLABEL) Module Build As Flagged!!!...";\
	else \
	  $(MAKE) binaries; \
	fi

profile:
	@if (test ! -z $(MTRACK)) \
	  then echo "                  MakeModTarg Target profile"; \
        fi
	@echo ""
	@echo ""
	@echo "             Compiling $(MODLABEL) Module With Profiling"
	@echo "             ----------$(MODLABUN)----------------------"
	@${MAKE} allblurb
	@${MAKE} alldirs
	@if (test -z $(BUILDF)) \
	then \
          echo "    Skipping $(MODLABEL) Module Build As Flagged!!!...";\
	else \
          $(MAKE) $(LIB)/$(LIBNAMEP); \
	fi

###############################################################################
#                                                                             #
# alldirs: Insures that the binaries directory is present and writable. This  #
#          is the directory where compiled binary object files will be put    #
#          and where any libraries built will be placed.                      #
#                                                                             #
# - MTRACK:   Flag indicating whether to track Makefile targets               #
# - LIB:      Binaries directory                                              #
#                                                                             #
###############################################################################

alldirs: force
	@if (test ! -z $(MTRACK)) \
          then echo "                      MakeModTarg Target alldirs"; \
	fi
	@if (test ! -d $(ARCHDIR)) \
	then \
          mkdir $(ARCHDIR); \
          chmod ug+w $(ARCHDIR); \
	fi
	@if (test ! -d $(LIB)) \
	then \
          mkdir $(LIB); \
          chmod ug+w $(LIB); \
	fi

###############################################################################
#                                                                             #
# binaries: Compiles the module source codes into binary object files and     #
#           places them in the binaries directory. If desired, these binaries #
#           are linked together to produce a module library.                  #
#                                                                             #
# - MTRACK:   Flag indicating whether to track Makefile targets               #
# - MODLIBS:  Flag indicating whether to build module library                 #
# - MAKE:     Name of make excutable                                          #
# - LIB:      Binaries directory                                              #
# - LIBNAME:  Name of library to produce                                      #
# - OBJ:      Name of all object files used in module                         #
#                                                                             #
# $(LIB)/$(LIBNAME)                                                           #
# $(OBJ)                                                                      #
#                                                                             #
###############################################################################

binaries: force
	@if (test ! -z $(MTRACK)) \
          then echo "                      MakeModTarg Target binaries"; \
        fi
	@if (test ! -z $(MODLIBS)) \
	then \
	  echo "        * Building $(MODLABEL) Module Binary Object Files & Library";\
	  echo "          The Module Library Will Be Named $(LIBNAME)";\
	  echo "          This Will Be Placed Into $(LIB)";\
	  $(MAKE) $(LIB)/$(LIBNAME); \
	  echo ""; \
	else \
	  echo "        * Building $(MODLABEL) Module Binaries Only";\
	  $(MAKE) $(OBJ); \
	fi


###############################################################################
#                                                                             #
#                             OBJECT FILE BUILDS                              #
#                                                                             #
# The following targets are used to compile module source codes into object   #
# files.  These are done independently of any library builds and can thus be  #
# used to generate any number of different libraries.  They will not do any   #
# cleaning of generated object files when completed. They will create any     #
# required directory to needed to contain the object files.                   #
#                                                                             #
# TARGETS & PATTERNS:                                                         #
#                                                                             #
# objects      - Target to update all object files for a specific module.     #
# objectsd     - Same as above but only does a dry run.                       #
# fileso       - Target to build object files silently.                       #
# filesop      - Target to build object files silently with profiling.        #
#                                                                             #
# DEPENDENCIES:                                                               #
#                                                                             #
# force        - Depends on this target to force things to be done.           #
# LABEL        - Label for module being dealt with.                           #
# LABUN        - Label underline for module being dealt with.                 #
# MAKE         - Make program being used.                                     #
# alldirs      - Target to generate directory that contains object files.     #
# BUILDF       - Flag whether to build for this module or not.                #
# NOTSOLO      - Flag whether running Makefile recursively.                   #
# MODULEDIR    - Current module's subdirectory.                               #
# LOCMIRRORDIR - Where to copy current module's subdirectory.                 #
# LOCMIRRORSHARE - Where to copy current module subdirectory sources.         #
# LOCMIRRORSRC - Where to copy current module subdirectory sources.           #
# FILES        - Source files for the module needed to make object files.     #
# OBJ          - Object files for the module.                                 #
#                                                                             #
###############################################################################

objects:
	@echo ""
	@echo "                        Making $(LABEL) Module Object Files"
	@echo "                        -------$(LABUN)--------------------"
	@${MAKE} alldirs
	@if (test -z $(BUILDF)) \
	then \
	  echo "Skipping $(LABEL) Module Build As Flagged!!!...";\
	else \
	  $(MAKE) fileso
	fi

objectsd:
	@echo ""
	@echo "                        Making $(LABEL) Module Object Files"
	@echo "                        -------$(LABUN)--------------------"
	@${MAKE} alldirs
	@if (test -z $(BUILDF)) \
	then \
	  echo "Skipping $(LABEL) Module Build As Flagged!!!..."; \
	else \
	  echo "Using Command $(MAKE) fileso"; \
	fi

fileso: $(FILES) $(OBJ)

filesop: $(FILES) $(OBJP)

###############################################################################
#                                Target: force                                #
#                                                                             #
# This is never satisfied.  So, it is used in the dependency of other targets #
# when we want to be sure those targets run.                                  #
#                                                                             #
###############################################################################

force:

###############################################################################
#                                Target: clean                                #
#                                                                             #
# This target performs two functions.  First it will remove any object files  #
# generated from compiling GAMMA source code from this module.  These object  #
# files will reside in the library directory which is particular for the      #
# current computer architecture,  $(ARCHDIR) and the file names themselves    #
# all reside in the variable name $(OBJ).  The second pupose to clean is to   #
# remove any files that have been copied into a temporary directory during    #
# a source distribution of this modules released files.  All GAMMA source     #
# code distributions copy released files into a temporary directory hierarchy #
# mimicking the GAMMA directory structure and then they are packaged up. If   #
# this module's sources have been specifically packaged then the copies made  #
# must be deleted.  In a full GAMMA source distrubution all temporary files   #
# are deleted in the main GAMMA makefile, NOT here.  So, this target section  #
# won't do anything unless it is being run in SOLO mode.                      #
#                                                                             #
###############################################################################

clean:  force
	@${MAKE] cleanobj
	@${MAKE] srcclean

cleanobj: force
	@echo ""
	@echo "        Removing $(LABEL) Library Object Files"
	@echo "        ---------$(LABUN)---------------------"
	@echo ""
	@echo "Library Directory Listed As" $(LIB)
	@echo ""
	@if(test ! -d $(ARCHDIR))\
          -rm -f $(OBJ)

###############################################################################
#                             Target: dos2unix                                #
#                                                                             #
# This target is used to remove the ^M characters that are DOS line returns.  #
# Such returns are often left in Makefiles after building GAMMA in a Cygwin   #
# environment on Windows/Intel based systems.  Unfortunately they will mess   #
# up the make program on a typical Unix system.  Here we invoke "dos2unix" to #
# replace these line returns with \n in the files Makefile and MakeDefs.      #
#                                                                             #
# This target depends upon the definition of $DOS2UNIX which should be set    #
# to a program that acts like the Unix "dos2unix" program.  Here we just do a #
# a conversion of Makefile -> Makefile and MakeDefs -> MakeDefs.              #
#                                                                             #
###############################################################################

dos2unix: force
	@${DOS2UNIX} Makefile Makefile
	@${DOS2UNIX} MakeDefs MakeDefs
