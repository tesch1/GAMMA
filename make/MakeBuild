###############################################################################
#                                                                             #
#                                 G A M M A                                   #
#               Makefile For The GAMMA MR Simulation Platform                 #
#                      Copyright © 1999 Scott A. Smith                        #
#                  National High Magnetic Field Laboratory                    #
#                         1800 E. Paul Dirac Drive                            #
#                     Tallahassee, FL, USA 32307-4005                         #
#                          ssmith@magnet.fsu.edu                              #
#                      On WWW See gamma.magnet.fsu.edu                        #
#                                                                             #
# =========================================================================== #
#                                                                             #
#                                 Quick Info                                  #
# 1.) Builds object files & libraries for GAMMA.                              #
#     THIS DOES THE BULK OF THE WORK IN COMPILING GAMMA.                      #
# 2.) Recurses through each module's Makefile                                 #
# 3.) Must be supplied with the following variables:                          #
#   a. MAKE       The make program                          ($GAMMA makefile) #
#   a. NPD        The directory print flag                   (set locally!!!) #
#   b. MODLIBS    Flag if module libraries built.                             #
#   c. SUMLIB     Flag if global library built.                               #
#   d. GVERSION:  Current GAMMA version (e.g. 4.0.7)                          #
#   e. GVERSUL:   Current GAMMA verison underlining                           #
#   f. LIB        Directory where binaries will be placed.                    #
#   g. SRCDIR:    GAMMA source directory name (e.g. src),           (MakeGam) # 
#   h. PASSFLAGS: Flags passed to the recursed makefiles.   ($GAMMA makefile) #
#   i. LIBTYPE:   Text label for ttype of library                             #
#   j. CXX        Command to invoke C++ compiler.                             #
#   k. C++FLAGS   Flags used when invoking the C++ compiler                   #
#   l. MTRACK     Flag if makefile tracking desired                           #
#   m. AR         Archiving program for building libraries                    #
#   n. ARFLAGS:   Archiving program flags                                     #
#             5.) Provides the following targets:                             #
#                x. buildvars  Display all variable settings used in makefile #
#                                                                             #
# =========================================================================== #
#                                                                             #
# The concern of this Makefile is GAMMA source code compilation. Herein are   #
# targets that are used for such purposes.  They are intended to produce      #
# binary object files and binary libraries specific to the computer system    #
# that is running the build. Note that this file is included in the MAIN      #
# GAMMA makefile, $(GAMMAVER)/Makefile, and should not be confused with any   #
# similar file associated with a GAMMA module. They are very different!       @
#                                                                             #
# Users are free to copy this file for personal use but may NOT give out      #
# modifications with or without the GAMMA platform.  This and other makefiles #
# are typically packaged with the full GAMMA source distribution.  The full   #
# src distrubution may be obtained from the GAMMA WWW site above or any of    #
# its mirrors.                                                                #
#                                                                             #
# Notes: We Still Need GNU Make For This To Work.                             #  
#                                                                             #
###############################################################################

NPD = --no-print-directory
LIBTYPE=Static
#LIBTYPE=Shared

###############################################################################
#                                                                             #
# Primary Targets:                                                            #
#                                                                             #
#    buildall  : Creates a distribution file of GAMMA sources (ala unix).     #  
#                A similar srcdist is run recursively in GAMMA makefiles.     #  
#    srcddist  : Creates a distribution file of GAMMA sources (ala windows).  #
#                A similar srcddist is run recursively in GAMMA makefiles.    #
#    hdrdist   : Creates a distribution file of GAMMA headers (ala unix).     #  
#                A similar hdrdist is run recursively in GAMMA makefiles.     #  
#    hdrddist  : Creates a distribution file of GAMMA headers (ala windows).  #
#                A similar hdrddist is run recursively in GAMMA makefiles.    #
#    srcvars   : Outputs a list of variables used by make during source       #  
#                code distributions.                                          #


###############################################################################
#                                                                             #
#       These Targets Deal With Compilation of Individual GAMMA Modules       #
#                                                                             #
# These module targets are not normally called directly because the modules   #
# are handled by the generic "all" target.  However, these exist because      #
# they are useful in that they allow testing of how an individual module      #
# compiles. Well, OK, they are also very handy when just compiling a single   #
# module.                                                                     #
#                                                                             #
# SRC:      Name of GAMMA source directory.  This will be the name seen when  #
#           in the GAMMAVER directory, e.g. src.                              #
# MAKE:     The program being worked with. This will be automatically set     #
#           when make is run from the command line.                           #
# NPD:      Direct print supression flag (--no-print-directory).  This will   #
#           be defined in the generic file $GAMMAVER/$MAKE/MakeGam but that   #
#           definition will only be used when running NONSOLO.  If SOLO the   #
#           definition of NPD will stem from the definition in this file.     # 
# PASSFLGS: The flags that are passed from the main GAMMA makefile during     #
#           recursion into this file. If running SOLO then this is set to     #
#           be an empty string (done earlier in this makefile)                #  
#                                                                             #
# Note that these targets simply route to the individual module Makefiles     #
# and run the "make all" command there.                                       #
#                                                                             #
###############################################################################

###############################################################################
#                                                                             #
#                              Target: buildall                               #
#                                                                             #
# The targets in this section are they which will compile GAMMA source codes  #
# and generate object files. This is done by recursing through all of the     #
# module directories and invoking their Makefiles to do the compilation.      #
#                                                                             #
# MAKE:      The program being worked with. This will be automatically set    #
#            when make is run from the command line.                          #
# NPD:       Direct print supression flag (--no-print-directory).  This will  #
#            be defined in the generic file $GAMMAVER/$MAKE/MakeGam but that  #
#            definition will only be used when running NONSOLO.  If SOLO the  #
#            definition of NPD will stem from the definition in this file.    # 
# MODLIBS:   Flag whether to libraries for each GAMMA module.		      #  
# SUMLIB:    Flag whether to build one large library.                         #  
# GVERSION:  The current GAMMA version (e.g. 4.0.7)                           #
# GVERSUL:   The current GAMMA verison underlining (e.g. ------)              #
# LIB:       Full path name where object files are stored or will be placed.  #
#            For example /gamma3/temp/gamma-4.0.7/sparc-sun-solaris2.6        # 
#            This is also the directory where libraries will be placed.	      #
# SRCDIR:    The GAMMA source directory name (e.g. src), in MakeGam           # 
# PASSFLAGS: The flags that will be passed to the recursed makefiles. This    #
#            variable will be specified in the main GAMMA makefile.           #  
# LIBTYPE:   Variable contains text for output labeling the type of library   #
#            being produced based on varialbe SHARED. Will either be "Static" #
#            or "Dynamic"                                                     #
# f. MTRACK     Flag if makefile tracking desired              #
# g. AR         Archiving program for building libraries       #
# h. ARFLAGS:   Archiving program flags                        #
# i. LIBNAME:   Name of library to be built from .o files      #
# j. LIBNAMEP:  Name of library to be built from _p.o files    #
#                                                                             #
###############################################################################

buildall: 	
	@if (test ! -z $(MTRACK)) \
	  then echo "                      MakeBuild Target buildall"; \
	fi
	@$(MAKE) $(NPD) buildstart
	@$(MAKE) $(NPD) builddir
	@$(MAKE) $(NPD) buildtype
	@if (test ! -z $(MODLIBS)) \
	then \
	  $(MAKE) $(NPD) buildmods; \
	else \
          $(MAKE) $(NPD) buildobj; \
	fi
	@if (test ! -z $(SUMLIB)) \
	then \
          echo "      * Making Single Static Library $(LIB)/$(LNAME)"; \
           $(MAKE) $(NPD) statsumlib; \
          rm -f $(LIB)/$(LNAME); \
          $(AR) $(ARFLAGS) $(LIB)/$(LNAME) $(LIB)/*.o; \
          echo ""; \
        fi

###############################################################################
#                                                                             #
# buildstart: Just outputs a header for show. Lists the GAMMA version being   #
#             built. Run for make/build of any GAMMA library.                 #
#                                                                             #
###############################################################################

buildstart: 	
	@if (test ! -z $(MTRACK)) \
	  then echo "                      MakeBuild Target buildstart"; \
	fi
	@echo " "
	@echo "                    Building GAMMA Version $(GVERSION)"
	@echo "                    ------------------------$(GVERSUL)"
	@echo "                    ------------------------$(GVERSUL)"
	@echo " "

###############################################################################
#                                                                             #
# buildir: Insures that the binary directory exists. This is the directory    #
#          where all object and library files are to be placed. The full path #
#          of the directory will reside in $(LIB). This target will be run    #
#          Run for make/build of any GAMMA library.                           #
#                                                                             #
###############################################################################

builddir: 	
	@if (test ! -z $(MTRACK)) \
	  then echo "   MakeBuild Target builddir"; \
	fi
	@echo "   This Build Will Place All GAMMA Binaries (Object Files & Libraries) In"
	@echo "   Directory $(LIB)"
	@if (test ! -d $(LIB)) \
	then \
	  echo "   This Directory Must First Be Constructed. Attempting To Do So Now."; \
          mkdir $(LIB); \
          chmod ug+w $(LIB); \
	  echo "   O.K. Finished......."; \
	fi
	@echo " "

###############################################################################
#                                                                             #
# buildtype: Just outputs more cosmetic information. In this case we list the #
#            type of build being performed. There are four possiblities, we   #
#            either build shared or static libraries and these can be done at #
#            the GAMMA module level or spanning the whole of GAMMA. The flags #
#            that dictate this are $(SUMLIB) and $(MODLIBS) and $(SHARED)     #
#            although $(SHARED) is used only to set the text in $(LIBTYPE)    #
#                                                                             #
#            Single Static Library:   SUMLIB!=0,  SHARED=0                    #
#            Single Shared Library:   SUMLIB!=0,  SHARED!=0                   #
#            Module Static Libraries: MODLIBS!=0, SHARED=0                    #
#            Module Shared Libraries: MODLIBS!=0, SHARED!=0                   #
#                                                                             #
#            Although one may build both static and module libraries with the #
#            same build, one cannot build both shared and static libraries    #
#            at the same time because they will use different compiler flags. #
#                                                                             #
#            Note that the only reason to build modular libraries is if the   #
#            library spanning all of GAMMA is too large to deal with. If      #
#            using only part of GAMMA then it may be using only some of the   #
#            module libraries will keep the code smaller and running faster.  #
#                                                                             #
#            This target will be run for make/build of any GAMMA library.     #
#                                                                             #
###############################################################################

buildtype: 	
	@if (test ! -z $(MTRACK)) \
	  then echo "      * MakeBuild Target buildtype"; \
	fi
	@if (test ! -z $(SUMLIB)) \
	then \
	  echo "      * A Single Large GAMMA $(LIBTYPE)" Library Will Be Made"; \
	else \
	  echo "      * A Single Large GAMMA $(LIBTYPE)" Library Will Not Be Made"; \
	fi
	@if (test ! -z $(MODLIBS)) \
	then \
	  echo "      * Individual Module $(LIBTYPE) Libraries Will Be Made"; \
	else \
	  echo "      * Individual Module $(LIBTYPE) Libraries Will Not Be Made"; \
	fi

###############################################################################
#                                                                             #
# buildmods: Loops through each module in SUBDIRS and compiles all module     #
#            source codes via the module's makefile target buildlib. Note     #
#            that here SRCDIR is the full path name of where GAMMA sources    #
#            reside. This target is similar to buildobj except that buildobj  #
#            does not link the object files per module into a module library. #
#                                                                             #
###############################################################################

buildmods: force	
	@if (test ! -z $(MTRACK)) \
	  then echo "      * MakeBuild Target buildmods"; \
	fi
	@for i in $(SUBDIRS); do \
          if [ -d ./$(SRCDIR)/$$i ] ; then \
            if (rootme=`pwd`/ ; export rootme ; \
              rootsrc=`cd $(srcdir); pwd`/ ; export rootsrc ; \
              echo "      * Compiling Sources For $$i"; \
              cd ./$(SRCDIR)/$$i; \
              $(MAKE) $(NPD) $(PASSFLGS) buildlib) ; then true ; \
            else exit 1 ; fi ; \
          else true ; fi ; \
        done

###############################################################################
#                                                                             #
# buildobj: Loops through each module in SUBDIRS and compiles all module      #
#           source codes via the module's makefile rule to build .o files     #
#           from .cc files. Note that here SRCDIR is the full path name of    #
#           where GAMMA sources reside. This target is similar to buildmods   #
#           except that we do not link the object files per module into a     #
#           module library.                                                   #
#                                                                             #
#           We expect that the targets "allblurb" and "buildobj" will be      #
#           present in the Makefile for individual modules.                   #
#                           OBJECT FILE BUILDING TARGETS                      #
#                                                                             #
# The targets in this section are they which will compile GAMMA source codes  #
# and generate object files. This is done by recursing through all of the     #
# module directories and invoking their Makefiles to do the compilation.      #

#                              Target: buildobj                               #
#                                                                             #
# SUBDIRS:   Subdirectories with recursive Makefiles for the distribution     #
#            This will be declared in the main GAMMA makefile.                #  
# PASSFLAGS: The flags that will be passed to the recursed makefiles. This    #
#            variable will be specified in the main GAMMA makefile.           # 
# SRCDIR:    Name of the source directory (e.g. src)                          # 
# MAKE:      The make program being worked with.  Will be automatically       #
#            supplied from the command line when make is invoked.             #
# NPD:       Direct print supression flag (--no-print-directory).  This will  #
#            be defined in the generic file $GAMMAVER/$MAKE/MakeGam but that  #
#            definition will only be used when running NONSOLO.  If SOLO the  #
#            definition of NPD will stem from the definition in this file.    #  
#                                                                             #
###############################################################################

buildobj:
	@if (test ! -z $(MTRACK)) \
	  then echo "      * MakeBuild Target buildobj"; \
	fi
	@echo "      * Compiling GAMMA Module Sources Into Static Binary Object Files"
	@for i in $(SUBDIRS); do \
          if [ -d ./$(SRCDIR)/$$i ] ; then \
            if (rootme=`pwd`/ ; export rootme ; \
              rootsrc=`cd $(srcdir); pwd`/ ; export rootsrc ; \
              echo ""; \
              echo "      * Compiling Sources For $$i Module"; \
              cd ./$(SRCDIR)/$$i; \
              $(MAKE) $(NPD) $(PASSFLGS) allblurb; \
              $(MAKE) $(NPD) $(PASSFLGS) $@) ; then true ; \
            else exit 1 ; fi ; \
          else true ; fi ; \
        done

###############################################################################
#                                                                             #
#                            LIBRARY BUILDING TARGETS                         #
#                                                                             #
# $(LIB)/$(STLIB)-   Builds a single static library for all of GAMMA. This    #
#                    will depend upon all object files summed over all the    #
#                    modules.  A list of all object file base names is set    #
#                    in the variable ALLFILES (set in MakeMods).  These are   #
#                    then set relative to $GAMMAVER in variable $(ALLSTOBJS)  #
# $(LIB)/$(SOLIB)-   Builds a single shared library for all of GAMMA. This    #
#                    will depend upon all shared object files summed over all #
#                    the modules. A list of all object file base names is set #
#                    in the variable ALLFILES (set in MakeMods).  These are   #
#                    then set relative to $GAMMAVER in variable $(ALLSOOBJS)  #
# statsumlib-        Also builds the single static library but will output    #
#                    a header during the build.                               #
# sharsumlib-        Also build the single shared library but will output     #
#                    a header during the build.                               #
#                                                                             #
# Note: The object file names used herein, ALLSTOJBS and ALLSOOBJS, must be   #
#       the same as those genereated during module compilations. That is,     #
#       the names must match those designated in MakeModBuild.                #
#                                                                             #
###############################################################################

STLIB = $(LNAME)
SOLIB = gamma.so

ALLSTOBJS = $(addsuffix .o, $(addprefix $(LIB)/, $(ALLFILES)))
ALLSOOBJS = $(addsuffix so.o, $(addprefix $(LIB)/, $(ALLFILES)))

$(LIB)/$(STLIB): $(ALLSTOBJS)
	@rm -f $(LIB)/$(STLIB)
	@$(AR) $(ARFLAGS) $(LIB)/$(STLIB) $(LIB)/*.o

          
#$(LIB)/$(SOLIB): $(ALLSOOBJS)
$(LIB)$(SOLIB): force
	@echo " Shared Library Builds Not Yet Available...."

statsumlib: force
	@echo "      * Making Single Static Library $(LIB)/$(LNAME)"
	@$(MAKE) $(NPD) $(LIB)/$(NAME)

sharsumlib: force
	@echo "  Building GAMMA Single Large Shared Library"
	@$(MAKE) $(NPD) $(LIB)/$(NAME)

statmodlib:
	@echo ""
	@echo "   Compiling GAMMA Sources Into Static Module Libraries Files"
	@echo
	@for i in $(SUBDIRS); do \
          if [ -d ./$(SRCDIR)/$$i ] ; then \
            if (rootme=`pwd`/ ; export rootme ; \
              rootsrc=`cd $(srcdir); pwd`/ ; export rootsrc ; \
              cd ./$(SRCDIR)/$$i; \
              $(MAKE) $(NPD) $(PASSFLGS) all) ; then true ; \
            else exit 1 ; fi ; \
          else true ; fi ; \
        done

#buildlibs:
#	@echo ""
#	@echo "   Compiling GAMMA Sources Into Module Libraries Files"
#	@echo
#	@for i in $(SUBDIRS); do \
#          if [ -d ./$(SRCDIR)/$$i ] ; then \
#            if (rootme=`pwd`/ ; export rootme ; \
#              rootsrc=`cd $(srcdir); pwd`/ ; export rootsrc ; \
#              cd ./$(SRCDIR)/$$i; \
#              $(MAKE) $(NPD) $(PASSFLGS) $@) ; then true ; \
#            else exit 1 ; fi ; \
#          else true ; fi ; \
#        done


###############################################################################
#                                                                             #
#                             Target: buildvars                               #
#                                                                             #
# During a GAMMA compilation object files, library files and directories are  #
# created and destroyed. This can be dangerous if some variables in the       #  
# Makefile are improperly set. At the vary least, the different targets will  #
# not work. At worst, important files are destroyed.  This target will simply #
# spit out all of the variables that are overtly used in this makefile. This  #
# way one can have a look if things appear proper prior to running anything   #
# that does file/directory manipulations. This target is not normally run by  #
# a GAMMA user, it is more useful in building makefiles and debugging them.   #
#                                                                             #
# GVERSION:  The current GAMMA version (e.g. 4.0.7)                          #
# GVERSUL:   The current GAMMA verison underlining (e.g. ------)              #
# LIB:       Full path name where object files are stored or will be placed.  #
#            For example /gamma3/temp/gamma-4.0.7/sparc-sun-solaris2.6       # 
# SRC:      Name of GAMMA source directory.  This will be the name seen when  #
#           in the GAMMAVER directory, e.g. src.                              #
# SUBDIRS:   Subdirectories with recursive Makefiles for the distribution     #
#            This will be declared in the main GAMMA makefile.                #  
# MAKE:     The program being worked with. This will be automatically set     #
#           when make is run from the command line.                           #
# NPD:      Direct print supression flag (--no-print-directory).  This will   #
#           be defined in the generic file $GAMMAVER/$MAKE/MakeGam but that   #
#           definition will only be used when running NONSOLO.  If SOLO the   #
#           definition of NPD will stem from the definition in this file.     # 
# PASSFLGS: The flags that are passed from the main GAMMA makefile during     #
#           recursion into this file. If running SOLO then this is set to     #
#           be an empty string (done earlier in this makefile)                #  
# SRCDIR:    The GAMMA source directory name (e.g. src), in MakeGam           # 
# MAKE:      The make program being worked with.  Will be automatically       #  
#            supplied from the command line when make is invoked.             #  
# NPD:       Direct print supression flag (--no-print-directory). This will   #
#            be defined in generic file $GAMMAVER/$MAKE/MakeGam but that      #
#            definition will only be used when running NONSOLO. If SOLO the   #
#            definition of NPD will stem from the definition in this file.    #
# PASSFLAGS: The flags that will be passed to the recursed makefiles. This    #
#            variable will be specified in the main GAMMA makefile.           #  
# MODLIBS:   Flag whether to libraries for each module.                       #  
# SUMLIB:    Flag whether to build one large library.                         #  
#                                                                             #
###############################################################################

buildvars:   
	@echo ""
	@echo "   Make Variables Used For GAMMA Source Compilations"
	@echo "   -------------------------------------------------"
	@echo ""
	@echo "  GVERSION     The GAMMA Version                 = $(GVERSION)"
	@echo "  GVERSUL      The Underline of GVERSION         = $(GVERSUL)"
	@echo "  LIB          The GAMMA Library Directory Path  = $(LIB)"
	@echo "  SRC          The GAMMA Source Directory Path   = $(SRC)"
	@for i in $(SUBDIRS); do \
	 echo "  SUBDIRS      Module Directory We Recurse Into  = $$i"; \
	done
	@echo "  SRCDIR       The GAMMA Source Directory Name   = $(SRCDIR)"
	@echo "  GAMDIST      Relative Temp GAMMA Dist. Dir.    = $(GAMDIST)"
	@echo "  AR           The System Archiving Program      = $(AR)"
	@echo "  ARFLAGS      Archiving Program Flags           = $(ARFLAGS)"
	@if (test ! -z $(MODLIBS)) \
	then \
          echo "  MODLIBS      Module Static Libraries To Build  = $(MODLIBS)"; \
	else \
          echo "  MODLIBS      Module Static Libraries NOT Made  = $(MODLIBS)"; \
	fi
	@if (test ! -z $(SUMLIB)) \
	then \
          echo "  SUMLIB       Single Static Library Will Build  = $(SUMLIB)"; \
	  echo "  LNAME        Static Library Name               = $(LNAME)"; \
	  echo "  LPNAME       Static Library Name (Profile)     = $(LPNAME)"; \
	else \
          echo "  SUMLIB       Single Static Library NOT Made    = $(SUMLIB)"; \
	fi
	@echo "  PROJECTPATH  GAMMA Project Path (Full Direct.) = $(PROJECTPATH)"
	@echo "  PASSFLGS     Variables Sent To Recursive Makes :"
	@echo
	@for i in $(PASSFLGS); do \
	echo "   $$i"; \
	done
	@echo
	@for i in $(SUBDIRS); do \
           if [ -d ./$(SRCDIR)/$$i ] ; then \
             if (rootme=`pwd`/ ; export rootme ; \
               rootsrc=`cd $(srcdir); pwd`/ ; export rootsrc ; \
               cd ./$(SRCDIR)/$$i; \
               $(MAKE) --no-print-directory $(PASSFLGS) $@) ; then true ; \
             else exit 1 ; fi ; \
	   else true ; fi ; \
        done
	@echo ""

#	@for i in $(ALLFILES); do \
#	echo "   $$i"; \
#	done
