###############################################################################
#                                                                             #
#                                 G A M M A                                   #
#               Makefile For The GAMMA MR Simulation Platform                 #
#                     Copyright © 1999 Scott A. Smith                         #
#                  National High Magnetic Field Laboratory                    #
#                         1800 E. Paul Dirac Drive                            #
#                     Tallahassee, FL, USA 32307-4005                         #
#                          ssmith@magnet.fsu.edu                              #
#                      On WWW See gamma.magnet.fsu.edu                        #
#                                                                             #
# The concern of this Makefile is GAMMA compilation and distribution. Herein  #
# are define generic targets that are used for such purposes.  Note that this #
# is included in the MAIN GAMMA makefile and should not be confused with a    #
# similar file included in makefiles associated with specific GAMMA modules.  #
#                                                                             #
# Users are free to copy this file for personal use but may NOT give out      #
# modifications with or without the GAMMA platform.  This and other makefiles #
# are typically packaged with the full GAMMA source distribution.  The full   #
# src distrubution may be obtained from the GAMMA WWW site above or any of    #
# its mirrors.                                                                #
#                                                                             #
###############################################################################

###############################################################################
#                                                                             #
#                               Target: all, profile                          #
#                                                                             #
# Target all compiles GAMMA into a set of library files.  This is performed   #
# rescursively by module. Each module resides in it own source sub-directory, #
# has its own Makefile, and produces its own library.  Users can turn on/off  #
# the compilation of any library and/or it's inclusion during linking while   #
# building GAMMA programs.  Target profile does the same thing as all except  #
# that it includes profiling built into the libraries.  Profiling libraries   #
# are normally used by developers and co-exist (i.e. use more disk space)     #
# with the normal libraries.                                                  #
#                                                                             #
# Performance:                                                                #
#                                                                             #
# 1. Create Directory "LIB" If Not Yet Existing                               #
# 2. Change "LIB" Directory So That User & Group Members Have Write Ability   #
# 3. Build The GAMMA Libraries (Recursively) and Put Them In "LIB"            #
#                                                                             #
# Variables:                                                                  #
#                                                                             #
# MAKE:      The program being worked with. This will be automatically set    #
#            when make is run from the command line.                          #
# NPD:       Direct print supression flag (--no-print-directory).  This will  #
#            be defined in the generic file $GAMMAVER/$MAKE/MakeGam but that  #
#            definition will only be used when running NONSOLO.  If SOLO the  #
#            definition of NPD will stem from the definition in this file.    # 
# GVERSION:  The GAMMA version label (e.g. 4.0.7)                             #
# GVERSUL:   The GAMMA version label underline (e.g. ------)                  #
# LIB:       The GAMMA binary library directory path.  This will be a full    #
#            path name based upon the computer architecture and OS type,      #
#            e.g. $(GAMMAVER)/sparc-sun-solaris-2.7                           #
# SRCDIR:    The GAMMA source directory.  This will be a sub-directory local  #
#            to $(GAMMAVER) such as "src".                                    #
# SUBDIRS:   List of module subdirectories we will recurse make into.         #
# STATLIB:   Flag to build a single static library from object files.         #
# LNAME:     Single static library name. This is not a full path name.        #
#                                                                             #
###############################################################################

#NPD = --no-print-directory

all:    
	@$(MAKE) $(NPD) buildall 	
	@echo " "
	@echo "       Build Completed, Run make install Next?"
	@echo " "
	@echo " "


profile: 	
	@echo " "
	@echo "            Building GAMMA Version $(GVERSION) With Profiling"
	@echo "            ------------------------$(GVERSUL)---------------"
	@echo "            ------------------------$(GVERSUL)---------------"
	@echo " "
	@echo "   This Build Will Place All GAMMA Binaries (Object Files & Libraries) In"
	@echo "   Directory $(LIB)"
	@if (test ! -d $(LIB)) \
	then \
	  echo "   This Directory Must First Be Constructed. Attempting To Do So Now."; \
          mkdir $(LIB); \
          chmod ug+w $(LIB); \
	fi
	@echo " "
	@for i in $(SUBDIRS); do \
           echo "Making $@ in ./src/$${i} ..." ; \
           if [ -d ./src/$$i ] ; then \
             if (rootme=`pwd`/ ; export rootme ; \
               rootsrc=`cd $(srcdir); pwd`/ ; export rootsrc ; \
               cd ./src/$$i; \
               $(MAKE) $(NPD) $(PASSFLGS) $@) ; then true ; \
             else exit 1 ; fi ; \
           else true ; fi ; \
        done
	@echo " "
	@echo "       Build Completed, Run make install Next?"
	@echo " "
	@echo " "

###############################################################################
#                                                                             #
#                                PATTERNS                                     #
#                                                                             #
# 1. $(LIB)/file.o    <-- $(LIB)/file.cc    Make object files from cc source  #
# 2. $(LIB)/file_p.o  <-- $(LIB)/file.cc    Profiling object files from cc src#
# 3. $(LIB)/$(LNAME)  <-- $(LIB)/{file.o}   Library from object files         #
# 4. $(LIB)/$(LPNAME) <-- $(LIB)/{file_p.o} Profiling Lib. from object files  #
#                                                                             #
# Patterns 1 & 2 dictate how to form an object file in the GAMMA library      #
# directory $(LIB) from a C++ source code file in the GAMMA source directory  #
# $(SRC). If the cc file is more recent than the object file then the object  #
# file should automatically be recompiled.                                    #
#                                                                             #
# Patterns 3 & 4 dictate how to generate the gamma library in the GAMMA       #
# library directory from object files in the library directory $(LIB). If the #
# library file $(LIB)/$(LBNAME) is older than the object files, any existing  #
# existing library will be deleted and the library rebuilt.  Since the object #
# files $(OBJ) depend on the source files (patterns 1&2), if the object files #
# are older than the source files they are remade before the library is made. #
#                                                                             #
# Notes:                                                                      #
#                                                                             #
# 1.) GNU make automatically scans a local RCS directory if a C++ source code #
# file is not present and use the RCS system to check out a new copy of the   #
# file. This will only be appilicable to GAMMA developers (not GAMMA users.)  #
# When an object files is being generated, lack of a corresponding source     #
# file will trigger it being freshly checked out using RCS.                   #
#                                                                             #
# 2.) The library directory $(LIB) is dependent on the computer architecture. #
# Typically this will be $(GAMMA)/$(host)/LIB/ where $(host) is specific      #
# for the system being worked on.                                             #
#                                                                             #
# 3.)The library is built static here, using the archiving program $(AR).     #
#                                                                             #
# 4.) Currently most GAMMA source codes are compiled in modules, where each   #
# module has its own Makefile which performs compilations, so these patterns  #
# aren't much used herein.                                                    #
#                                                                             #
# 5.) The ranlib command is now defunclt because the archiving programs       #
#      $(AR) tend to do this automatically.  Uncomment if needed.             #
#                                                                             #
# Variables:                                                                  #
#                                                                             #
# - SRC:     Source directory where GAMMA sources reside                      #
# - LIB:     Library directory for computer specific libraries & object files #
# - LNAME:   Name of library to be built                                      #
# - LPNAME:  Name of profiling library to be built                            #
# - OBJ:     Object files the library includes                                #
# - OBJP:    Object files with profiling the profiling library includes       #
# - FILES:   Source code files the object files are made from                 #
# - AR:      Archiving program for building libraries                         #
#                                                                             #
###############################################################################
 
#$(LIB)/%.o: $(SRC)/%.cc
#	$(CXX) -c $(GCXXFLAGS) $< -o $@
#	-chmod ug+w $@

#$(LIB)/%_p.o: $(SRC)/%.cc
#	$(CXX) -c $(GCXXFLAGS) -pg $< -o $@
#	-chmod ug+w $@

#$(LIB)/$(LNAME): $(FILES) $(OBJ) 
#	rm -f $@
#	$(AR) $(ARFLAGS) $@ $(OBJ)
#	$(RANLIB) $@
#	-chmod ug+w $@

#$(LIB)/$(LPNAME): $(FILES) $(OBJP) 
#	rm -f $@
#	$(AR) $(ARFLAGS) $@ $(OBJP)
#	$(RANLIB) $@
#	-chmod ug+w $@



###############################################################################
#                                                                             #
#       These Targets Deal With Compilation of Individual GAMMA Modules       #
#                                                                             #
# These module targets are not normally called directly because the modules   #
# are handled by the generic "all" target.  However, these exist because      #
# they are useful in that they allow testing of how an individual module      #
# compiles. Well, OK, they are also very handy when just compiling a single   #
# module.                                                                     #
#                                                                             #
# SRC:      Name of GAMMA source directory.  This will be the name seen when  #
#           in the GAMMAVER directory, e.g. src.                              #
# MAKE:     The program being worked with. This will be automatically set     #
#           when make is run from the command line.                           #
# NPD:      Direct print supression flag (--no-print-directory).  This will   #
#           be defined in the generic file $GAMMAVER/$MAKE/MakeGam but that   #
#           definition will only be used when running NONSOLO.  If SOLO the   #
#           definition of NPD will stem from the definition in this file.     # 
# PASSFLGS: The flags that are passed from the main GAMMA makefile during     #
#           recursion into this file. If running SOLO then this is set to     #
#           be an empty string (done earlier in this makefile)                #  
#                                                                             #
# Note that these targets simply route to the individual module Makefiles     #
# and run the "make all" command there.                                       #
#                                                                             #
###############################################################################

Basics:
	@cd $(SRC)/$@; $(MAKE) $(NPD) all $(PASSFLGS)

Matrix: 	
	@cd $(SRC)/$@; $(MAKE) $(NPD) all $(PASSFLGS)

HSLib: 	
	@cd $(SRC)/$@; $(MAKE) $(NPD) all $(PASSFLGS)

Level1: 	
	@cd $(SRC)/$@; $(MAKE) $(NPD) all $(PASSFLGS)

LSLib: 	
	@cd $(SRC)/$@; $(MAKE) $(NPD) all $(PASSFLGS)

Level2: 	
	@cd $(SRC)/$@; $(MAKE) $(NPD) all $(PASSFLGS)

Bloch:
	@cd $(SRC)/$@; $(MAKE) $(NPD) all $(PASSFLGS)

BWRRelax:
	@cd $(SRC)/$@; $(MAKE) $(NPD) all $(PASSFLGS)

IntRank2:
	@cd $(SRC)/$@; $(MAKE) $(NPD) all $(PASSFLGS)

Floquet:
	@cd $(SRC)/$@; $(MAKE) $(NPD) all $(PASSFLGS)

GamIO:
	@cd $(SRC)/$@; $(MAKE) $(NPD) all $(PASSFLGS)

Gradients:
	@cd $(SRC)/$@; $(MAKE) $(NPD) all $(PASSFLGS)

Pulses:
	@cd $(SRC)/$@; $(MAKE) $(NPD) all $(PASSFLGS)

MultiSys:
	@cd $(SRC)/$@; $(MAKE) $(NPD) all $(PASSFLGS)

ESRLib:
	@cd $(SRC)/$@; $(MAKE) $(NPD) all $(PASSFLGS)

Deprecated:
	@cd $(SRC)/$@; $(MAKE) $(NPD) all $(PASSFLGS)

Testing:
	@cd $(SRC)/$@; $(MAKE) $(NPD) all $(PASSFLGS)

WebCGI:
	@cd $(SRC)/$@; $(MAKE) $(NPD) all $(PASSFLGS)


###############################################################################
#                                                                             #
# The following patterns dictate how to generate files from files which are   #
# "checked in" using the RCS Revision Control System.  This is important ONLY #
# to GAMMA developers and not of any consequence to those who just use GAMMA  #
# to build programs.  The first will get any file in GAMMA's source directory #
# $(SRC)/file by checking it out of the RCS directory where the corresponding #
# "checked in" file is $(RCS)/file,v.  The next version does the same for     #
# files missing in the GAMMA library directory $(LIB), and the third version  #
# insures that the GAMMA makefile GNUmakefile will be checked out if needed.  #
# Note that GNU make will automatically perform this service on many file     #
# types, in particular source code files (.cc, .c, .h, ...). Furthermore, I   #
# currently have these commented out because I've been changing the makefile  #
# so that source code handling is done in modules where each module's own     #
# makefile handles such issues.  In addition, there should no longer be any   #
# files in the library directory handled this way because as of GAMMA 4.0     #
# no files under RCS control need to reside in that directory.                #
#                                                                             #
###############################################################################

#$(SRC)/%:: $(RCS)/%,v
#	$(CO) $(COFLAGS) $< $@

#$(LIB)/%:: $(RCS)/%,v
#	$(CO) $(COFLAGS) $< $@

#GNUmakefile: $(RCS)/GNUmakefile,v
#	$(CO) $(COFLAGS) $< $@

###############################################################################
#                 These Targets Do Clean-Up To Varying Degrees                #
###############################################################################
 
# The Target "clean" Simply Removes The Object Files In The Directory "ARCH"
# That Leaves Behind Only the Compiled GAMMA Library and/or libraries.
# A Subsequent Rebuild of GAMMA Will Cause Everything to Be Recompiled!
# However, Compilation of GAMMA Will Still Work Just Fine.
 
clean:
	@rm -rf $(LIB)/*.o

distclean:
	@rm -rf $(LIB)


###############################################################################
#                              Target: force                                  #
#                                                                             #
# This is never satisfied.  So, it is used in the dependency of other targets #
# when we want to be sure those targets run.                                  #
#                                                                             #
###############################################################################

force:
