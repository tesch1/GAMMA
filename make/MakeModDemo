###############################################################################
#                                                                             #
#                                 G A M M A                                   #
#          Module Demo Makefile For The GAMMA MR Simulation Platform          #
#                     Copyright (C) 1999 Scott A. Smith                       #
#                  National High Magnetic Field Laboratory                    #
#                         1800 E. Paul Dirac Drive                            #
#                     Tallahassee, FL, USA 32307-4005                         #
#                          ssmith@magnet.fsu.edu                              #
#                      On WWW See gamma.magnet.fsu.edu                        #
#                                                                             #
# The concern of this Makefile is the building, running, and distribution of  #
# of GAMMA module demo programs. Herein are defined the targets used for such #
# purposes. Note that this file will be included in each module's makefile &  #
# should not be confused with a similarly named file included in the main     #
# GAMMA makefile. They are quite different!                                   #
#                                                                             #
# Users are free to copy this file for personal use but may NOT give out      #
# modifications with or without the GAMMA platform.  This and other makefiles #
# are typically packaged with a GAMMA test (and other) source distribution.   #
# The full src distrubution may be obtained from the GAMMA WWW site above or  #
# from  any of its mirrors.                                                   #
#                                                                             #
# Notes: We Still Need GNU Make For This To Work.                             #
#                                                                             #
###############################################################################

###############################################################################
###############################################################################
############################# VARIABLES ARE BELOW #############################
###############################################################################
###############################################################################

###############################################################################
#                                                                             #
#           OVERALL VARIABLES CONCEPT & MANDATORY EXTERNAL VARIABLES          #
#                                                                             #
# Since the intent of this makefile is to simply be included into module      #  
# makefiles that handle module testing and test distributions, it does not    #
# add in any variables needed by other makefiles. It does require that some   #  
# variables be set and it will make some variables to use for its own         #
# convenience.  One must simply insure that any required external variables   #
# have been specified prior to running any targets defined herein. Thus, the  #
# module Makefile, $(GAMMAVER)/$(TEST)/$(MODULE)/Makefile, must supply all    #
# required external variables. Here is what we will need defined:             #
# places where needed external variables are defined:			      #
#                                                                             #
# NOTSOLO:     Flag if running independently or recursively by Main makefile  #
# BASENAME:    Base name of distribution file.  Not used unless run NONSOLO.  #
#              This will be explicitly defined in the module makefile         #
#              $(GAMMAVER)/$(SRC)/$(MODULE)/Makefile.                         #
# COPY2BASE:   This will serve as the point just below where the copied test  #
#              directory will reside. For a SOLO distribution of a single     #
#              module that will be ".", but for a larger source code dist-    #
#              ribtion this will be a full path to a copied GAMMA directory.  #
# GVERDIR:     Name of GAMMA version directory (gamma-4.0.7)                 #
# SRCDIR:      Name of GAMMA source directory (src)                           #
# MODULEDIR:   The is the source module directory. If the makefile is running #
#              SOLO it will simply be the current directory.  If it is run as #
#              part of a larger source code distribution it will be the full  #
#              path directory name (which will be $GAMMA/src or so)           #
# MODLABEL:    Name of module running the make. This will be declared in the  #
#              module Makefile prior to importing this target.                #
# MODLABUN:    Underline of module name for module running the make. This     #
#              will be declared in the  module Makefile prior to including    #
#              this target.                                                   #
# MODSRCFILES: List of files that will be in the source distribution.         #
# MODHDRFILES: List of files that will be in the header distribution.         #
# TARPGM:      Tar program to use (usually tar). Used when running SOLO with  #
#              Unix style output.                                             #
# TARFLGS:     Tar program flags to use (ususally cf). Used when running SOLO #
#              with Unix style output.                                        #
# GZIPPGM:     Compression program that will work on TARFILE (usually gzip).  #
#              Used when runnin SOLO with Unix style output.                  #   
# GZIPFLGS:    Compression program flags (usually nothing). Used when running #
#              SOLO with Unix style output.                                   #
# ZIPPGM:      Compression program that condenses distribution (pkzip or zip).#
#              Used when runnin SOLO with Windows style output.               #   
# ZIPFLGS:     Compression program flags. Used when running SOLO with Windows #
#              style output (-p -r).                                          #
#                                                                             #
###############################################################################
###############################################################################
#                                                                             #
#                               VARIABLES                                     #
#                                                                             #
# Since the intent of this makefile is to simply be included into module      #
# makefiles that handle testing and test distributions, it does not add in    #
# any variables needed by other makefiles.  It does however require that      #
# some variables be set and it will make some variables to use for its own    #
# convenience.  Make sure the external variables are specified in the file    #
# that includes this (i.e. $GAMMA/test/$MODULE/Makefile).                     #
#                                                                             #
#                           External Variables                                #
#                                                                             #
# *NOTSOLO:   Flag if running independently or recursively by Main makefile   #
# *PASSFLGS:  The flags that are passed from the main GAMMA makefile during   #  
#             recursion into this file. The value set will be overwritten     #
#             in that case, but it must be defined as "" for target testvars  #
#             to function properly.                                           #
# *MODULEDIR: The is the test module directory. If the makefile is running    #
#             SOLO it will simply be the current directory.  If it is run as  #
#             part of a larger test source distribution it will be the full   #
#             path directory name (which will be $GAMMA/test or so)           #
# *COPY2BASE: This will serve as the point just below where the copied test   #  
#             directory will reside. For a SOLO distribution of a single      #
#             module that will be ".", but for a larger test source dist-     #
#             ribtion this will be a full path to a copied GAMMA directory.   #
#  BASENAME:  Base name of distribution file.  Not used unless run SOLO       #
#  FNAMES:    Test source file base names to be included in the module test   #
#             distribution. These names will have a .cc appended to them and  #
#             they should reside in the module directory.                     #
#  SUPPF:     Supplemental files that are to be included in the module test   #
#             distribution. These names will not have any prefix added but    #
#             they should reside in the module directory.                     #
#  TESTDIR:   The GAMMA testing directory name (e.g. test)                    #
#  DIRNAME:   The module directory name (e.g. Basics, Matrix, ...)            #
#  TESTPGM:   GAMMA test program source name, in MakeGam, Makefile included.  #
#  TESTBIN:   GAMMA test program binary name, in MakeGam, Makefile included.  #
#  GAMMAPGM:  The GAMMA program command, in MakeGam, Makefile included        #
#                                                                             #
# * These variables are also defined in this file, but overwritten when the   #
#   make is run recursively.                                                  #
#                                                                             #
#                           Internal Variables                                #
#                (Only For Convenience, Not Needed Elsewhere)                 #
#                                                                             #
# TARFILE:       Tar file name, that produced upon test source distribution   #
#                of this specific module. Only used if running SOLO.          #
# ZIPFILE:       Zip file name, that produced upon test source distribution   #
#                of this specific module. Only used if running SOLO.          #
# COPY2TEST:     This will be the "test" directory where the copied module    #
#                will be placed. It will be the one that is zipped up if the  #
#                module by itself is distributed (SOLO)                       #
# COPY2DIR:      Directory where the copied module files will be placed.      #
# TESTDISTFILES: This is a listing of all files that will be copied from the  #
#                module during a distribution. These names will included the  #
#                full file path.                                              #
#                                                                             #
###############################################################################

###############################################################################
#                                                                             #
#                            CONVENIENCE VARIABLES                            #
#                                                                             #
# These variables are built from those defined above. They are only needed in #
# this makefile and only created to simplify the targets herein defined. The  #
# starred names are those which are only used in SOLO mode.                   #
#                                                                             #
# *TSTTARFILE:   Tar file name, that produced upon source distribution of     #
#                this specific module. Only used if running SOLO and using    #
#                a Unix compression (tar/gnuzip).                             #
# *TSTGZIPFILE:  Compressed file name, that produced upon source distribution #
#                of this specific module. Made from compression of source     #
#                tar file (TSTTARFILE). Only used if running SOLO and using   #
#                a Unix compression (tar/gnuzip).                             #
# *TSTZIPFILE:   Zip file name, that produced upon source distribution of     #
#                this specific module. Only used if running SOLO and using a  #
#                Windows compression method (pkzip)                           #
# COPY2TST:      Source directory where distributed files will be copied.     #
# COPY2DIR:      Module directory where distributed files will be copied.     #
# MODTSTFILES:   Source files that will be distributed with the module.       #
# MODHDRFILES:   Header files that will be distributed with the module.       #
#                                                                             #
###############################################################################

NPD           = --no-print-directory
GAMMAPGM      = gamma
TARPGM        = tar
TARFLGS       = cf
TSTTARFILE    = $(BASENAME).tar
TSTGZIPFILE   = $(TSTTARFILE).gz
PASSFLGS      = ""
NOTSOLO       = ""
MODULEDIR     = $(shell pwd)
COPY2BASE     = .
COPY2TEST     = ${COPY2BASE}/${TESTDIR}
COPY2DIR      = ${COPY2TEST}/${DIRNAME}
TESTDISTFILES = $(addprefix $(MODULEDIR)/, $(addsuffix .cc, $(FNAMES))) \
                $(addprefix $(MODULEDIR)/, $(SUPPF))

###############################################################################
#                                                                             #
#                    GAMMA MAKEFILE TESTING PATTERNS & TARGETS                #
#                                                                             #
# The patterns and targets in this section are they that involve testing of   #
# GAMMA performance. For the tests herein to work, GAMMA must be installed    #
# with a vaild C++ compiler and the test programs residing in $GAMMA/test.    #
# The first two are fundamental before GAMMA will work and the latter is what #
# probably provided this file.                                                #
#                                                                             #
# Test Primary Targets:                                                       #
#                                                                             #
# test     : Test the GAMMA platform.  This will compile an overall test      #
#            program then run it, sending the test results to screen.         #
#            Unlike other GAMMA testing (testsuite) this does not demand use  #
#            of the DejaGnu test framework (expect, tcl, etc..)               #
# testdist : Creates a distribution file of GAMMA test programs.  A           #
#            similar testdist is run recursively in GAMMA module makefiles.   #
# testvars : Output all variables relevant to using this makefile to screen.  #
#            This is done in a nicely formatted manner and useful in Makefile #
#            debugging. Most GAMMA users will not wish to use this.           #
#                                                                             #
# Test Secondary Targets:                                                     #
#                                                                             #
# testdir    : This deals with handling the test distribution temporary file  # 
#              directories.  During a test source distribution (testdist) the #
#              test sources and related files are all copied into a fresh     #
#              subdirectory that mimicks the GAMMA directory structure. This  #
#              is done so that the resulting package will untar/uncompresses  #
#              to reproduce this directory structure.  The target testdist    #
#              will make a new directory hierarchy so that the distribution   #
#              starts afresh.                                                 #
# teststdcopy: This copies any files NOT handled in module makefiles to the   #
#              the temporary distribution directory.  They will then be       #
#              included in the release.                                       #
# testtarfile: Generates a single tar file from the temporary distribution    #
#              directory.  All released files will be included along with     #
#              their proper directory placement.                              #
# testzipfile: Generates a single zip file from the distribution tar file of  #
#              the previous target.                                           #
# testclean:   Deletes any directories and files that were generated/copied   #
#              during the test source distribution.                           #
#                                                                             #
###############################################################################

###############################################################################
###############################################################################
########################## TESTING TARGETS ARE BELOW ##########################
###############################################################################
###############################################################################

###############################################################################
#                                                                             #
#                                Target: demo                                 #
#                                                                             #
# This target compiles and runs the GAMMA module demo program that reside in  #
# the module demo sub-directory, usually $GAMMA/$(DEMODIR)/modules. In        #
# particular, it will build and run the provided demo program $(MODDEMOPGM),  #
# usally a CC source file who's name relates to the module/directory name.    #
# For example, the Basics module sources reside in the Basics sub-directory   #
# from $GAMMA/${SRC} & the module demo should be ${MODDEMODIR}/DemoBasics.cc. #
# Here ${MODDEMODIR} is $GAMMA/${DEMODIR}/modules. The target will check that #
# both the directory and demo program exists, then will compile and run the   #
# demo.                                                                       #
#                                                                             #
# MODLABEL:  Name of module running the make. This will be declared in the    #
#            module Makefile prior to importing this target.                  #
# MODLABUN:  Underline of module name for module running the make. This       #
#            will be declared in the  module Makefile prior to including      #
#            this target.                                                     #
# NOTSOLO:   Flag whether makefile is running independently or being driven   #
#            by the main GAMMA makefile. This will be set by the main GAMMA   #
#            makefile (in PASSFLGS) or not if running SOLO.                   #
# MAKE:      The makefile being worked with. Set when invoking Make           #
# NPD:       Direct print supression flag (--no-print-directory).  This will  #
#            be defined in the generic file $GAMMAVER/$MAKE/MakeGam but that  #
#            definition will only be used when running NONSOLO.  If SOLO the  #
#            definition of NPD will stem from the definition in this file.    #
# TESTDIST:  Name of test distribution mock test directory. This will be      #
#            the location where GAMMA test directory files are copied to.     #
#            From MakeGam as include by main Makefile.                        #
# TESTPGM:   GAMMA test program source name, in MakeGam, Makefile included.   #
# TESTBIN:   GAMMA test program binary name, in MakeGam, Makefile included.   #
# GAMMAPGM:  The GAMMA program command, in MakeGam, Makefile included         #
#                                                                             #
###############################################################################

demo: force
	@echo
	@echo ""
	@echo "        Building & Running $(MODLABEL) Module Demo Program"
	@echo "        -------------------$(MODLABUN)--------------------"
	@echo " "
	@if (test -z $(NOTSOLO)) \
	then \
	  ${MAKE} $(NPD) demosolo; \
	else \
	  ${MAKE} $(NPD) demorecursive; \
	fi

###############################################################################
#                                                                             #
#                                Target: demosolo                             #
#                           DO NOT RUN THIS TARGET                            #
#                                                                             #
# This target is part of the GAMMA module demo target & is NOT meant to be    #
# run solo. It will first check to see whether a module's demo program exists #
# and, if it does, will compile and run the demo.                             #
#                                                                             #
# MODDEMOCC: The name of the module demo program.  This is a local name,      #
#            normally just Demo$(MODULEDIR).cc.  This will be set in the      #
#            module Makefile (i.e. MakeModTestBP in GAMMA/make) based on the  #
#            base name set in GAMMA/$(TESTDIR)/$(MODULEDIR)/MakeDefs.         #
# GAMMAPGM:  The GAMMA script to invoke when compiling GAMMA based programs.  #
# MODTESTEX: The name of the module test program executable. This is also a   #
#            local name, normally just Test$(MODULEDIR).exe.  Unix platforms  #
#            can execute any file type, however Windows systems cannot. They  #
#            need the .exe extension, so its use here satisfies both types.   #
#            This will be set in the module Makefile (i.e. MakeModTestBP in   #
#            GAMMA/make) based on the base name set in the file               #
#            GAMMA/$(TESTDIR)/$(MODULEDIR)/MakeDefs.                          #
#                                                                             #
# Note that during compilation the flag _TESTBYMAKE is defined and passed     #
# with the compiler.  This flag is used in the module testing programs to     #
# signal that they are being run through make and not interactively.          #
#                                                                             #
###############################################################################

demosolo:
	@if (test -f ./$(MODTESTCC)) \
	then \
	  $(GAMMAPGM) ./$(MODTESTCC) -o $(MODTESTEX) -D_TESTBYMAKE=1; \
	  ./$(MODTESTEX); \
          rm $(MODTESTEX); \
	else \
	  echo " * Cannot Module Demo Program File ./$(MODTESCC)?" ; \
	  echo "   Problems With GAMMA Demo Code Distribution...." ; \
	  echo; \
	  echo "                      CANNOT BUILD AND RUN GAMMA MODULE DEMO PROGRAM" ; \
	fi
    
demorecursive:
	@echo " Demo GAMMA Program Recursive...
	@echo " I haven't set this up at all yet, Sorry...

#	@if (test -d ./$(TESTDIR)) \
#	then \
#          { if (test -f ./$(TESTDIR)/$(TESTPGM)) \
#	    then \
#	      $(GAMMAPGM) ./$(TESTDIR)/$(TESTPGM) -o $(TESTBIN); \
#	      $(TESTBIN); \
#	      rm $(TESTBIN); \
#	    else \
#              echo " * Cannot File Testing Program GAMMA/test/$(TESTPGM)?" ; \
#              echo "   Problems With GAMMA Test Code Distribution...." ; \
#              echo; \
#              echo "                      CANNOT PERFORM GAMMA TESTING" ; \
#	  fi }; \
#	else \
#          echo; \
#          echo " * Cannot File Testing Directory, GAMMA/$(TESTDIR). It Does Not Exist." ; \
#          echo "   Has The GAMMA Test Code Distribution Been Properly Installed?" ; \
#          echo; \
#          echo "                      CANNOT PERFORM GAMMA TESTING" ; \
#          echo; \
#	fi

###############################################################################
###############################################################################
##################### TEST DISTRIBUTION TARGETS ARE BELOW #####################
###############################################################################
###############################################################################

###############################################################################
#                               Target: testdist                              #
#                                                                             #
# This target will copy ALL GAMMA released test source files from the current #
# module to a temporary directory.  If not called recursively, it will then   #
# tar those files and compress them into a package for distribution. Finally  #
# it will delete the copied files and temporary directory, leaving only the   #
# packaged test distribution file.                                            #
#                                                                             #
# MAKE:     The makefile being worked with. Set when invoking Make            #
# NPD:      Direct print supression flag (--no-print-directory).  This will   #
#           be defined in the generic file $GAMMAVER/$MAKE/MakeGam but that   #
#           definition will only be used when running NONSOLO.  If SOLO the   #
#           definition of NPD will stem from the definition in this file.     #
# testdir    : This deals with handling the test distribution temporary file  # 
#              directories.  During a test source distribution (testdist) the #
#              test sources and related files are all copied into a fresh     #
#              subdirectory that mimicks the GAMMA directory structure. This  #
#              is done so that the resulting package will untar/uncompresses  #
#              to reproduce this directory structure.  The target testdist    #
#              will make a new directory hierarchy so that the distribution   #
#              starts afresh.                                                 #
# teststdcopy: This copies any files NOT handled in module makefiles to the   #
#              the temporary distribution directory.  They will then be       #
#              included in the release.                                       #
# testtarfile: Generates a single tar file from the temporary distribution    #
#              directory.  All released files will be included along with     #
#              their proper directory placement.                              #
# testzipfile: Generates a single zip file from the distribution tar file of  #
#              the previous target.                                           #
# testclean:   Deletes any directories and files that were generated/copied   #
#              during the test source distribution.                           #
#                                                                             #
###############################################################################
 
testdist: force 
	@${MAKE} $(NPD) testdir    # Make tmp distribution direct.
	@${MAKE} $(NPD) testsrc    # Copy released files to tmp dir
	@${MAKE} $(NPD) testtar    # Tar up tmp distribution dir.
	@${MAKE} $(NPD) testgzip   # Zip up tar of distribution dir
	@${MAKE} $(NPD) testclean  # Remove any tmp files/direct.
	@echo

testddist: force $(MODSRCFILES)
	 @${MAKE} $(NPD) testdir   # Make tmp distribution directory
	 @${MAKE} $(NPD) testsrc   # Copy released files to tmp directory
	 @${MAKE} $(NPD) testzip   # Zip up tmp distribution dir
	 @${MAKE} $(NPD) testclean # Remove any tmp files/directories
	 @echo


###############################################################################
#                              Target: testdir                                #
#                           DO NOT RUN THIS TARGET                            #
#                                                                             #
# This target is part of the GAMMA module test source distribution target &   #
# is NOT really meant to run solo. It constructs a "mock" GAMMA directory off #
# of the current directory. In doing so it allows this makefile to generate   #
# a tar distribution file that, when untarred in the GAMMA root directory,    #
# generates all the released files for this module having the standard GAMMA  #
# directory structure.                                                        #
#                                                                             #
# Note that if this target is run SOLO it will generate the full, isolated,   #
# directory structure for this module alone beginning from the main GAMMA     #
# directory.  If it is running recursively as part of the main GAMMA makefile #
# it will only deal with the particular module test directory.                #
#                                                                             #
# force:       Commonly used force target.  Must be set externally.           #
# NOTSOLO:     Flag whether makefile is running independently or being driven #
#              by the main GAMMA makefile. This will be set by the main GAMMA #
#              makefile (in PASSFLGS) or not if running SOLO.                 #
# MODLABEL:    Name of module running the make. This will be declared in the  #
#              module Makefile prior to importing this target.                #
# MODLABUN:    Underline of module name for module running the make. This     #
#              will be declared in the  module Makefile prior to including    #
#              this target.                                                   #
# MODULEDIR:   Name of module directory to be copied.                         #
# COPY2DIR:    Directory where the copied module files will be placed. This   #
#              will be relative if running SOLO or a full path name if not.   #
# COPY2TEST:   This will be the "test" directory where the copied module      #
#              will be placed. It will be the one that is zipped up if the    #
#               module by itself is distributed (SOLO)                        #
#                                                                             #
###############################################################################

testdir: force
	@if (test -z $(NOTSOLO)) \
	then \
	  ${MAKE} --no-print-directory testdirsolo; \
	else \
	  ${MAKE} --no-print-directory testdirrecursive; \
	fi

testdirsolo:
	@echo ""
	@echo "     Making $(MODLABEL) Module Test Distribution"
	@echo "     -------$(MODLABUN)-------------------------"
	@echo ""
	@echo "     $(MODLABEL) Directory Is $(MODDIR)"
	@echo ""
	@echo " * We Will Copy The $(MODLABEL) Files To A Temporary"
	@echo "   Directory $(COPY2DIR)" 
	@if (test -d $(COPY2TEST)) \
        then \
          echo; \
          echo " * Temp Directory Exists. First Clear It And Files Therein" ; \
	  echo " * Only $(MODLABEL) Being Packaged, Not All Test Sources" ; \
	  echo "   Must Also Clear Main Test Temp Dir. & Its Sub-Directories" ; \
	  echo " * Removing Directory $(COPY2TEST)" ; \
          rm -rf ./$(COPY2TEST); \
	else \
          echo; \
          echo " * First Construct This Temp Directory And Check Structure" ; \
	fi
	@echo " * Constructing New Directory $(COPY2TEST)"
	@mkdir $(COPY2TEST)
	@chmod ug+w $(COPY2TEST)
	@echo " * Constructing New Directory $(COPY2DIR)"
	@mkdir $(COPY2DIR)
	@chmod ug+w $(COPY2DIR)

testdirrecursive:
	@echo " * Adding $(MODLABEL) Module Sources To Distribution"
	@echo ""
	@echo " * We Will Copy The $(MODLABEL) Files To A Temporary"
	@echo "   Directory $(COPY2DIR)"
	@if (test -d $(COPY2DIR)) \
        then \
          echo; \
          echo " * This Temp Directory Exists. First Clear It And Files Therein" ; \
          echo "   Removing Directory $(COPY2DIR)" ; \
          rm -rf $(COPY2DIR); \
	else \
          echo; \
          echo " * First Construct Temp Directory And Check Structure" ; \
	fi
	@echo
	@echo " * Creating Fresh Temporary Directory For This Module" 
	@echo "   Making Directory $(COPY2DIR)" 
	@mkdir $(COPY2DIR)
	@chmod ug+w $(COPY2DIR)


###############################################################################
#                                                                             #
#                                Target: testsrc                              #  
#                                                                             #
# This target is part of the GAMMA test source distribution target & NOT      #
# meant to be run solo. It copies the specified files form the current module #
# into the temporary directory $(COPY2DIR), thus adding these "released"      #
# files into the GAMMA test source distribution. Assuming that this target is #
# called from target srcdist, all of the files to be released will be up to   #
# date.                                                                       #
#                                                                             #
# MODLABEL:   Name of module running the make. This will be declared in the   #
#             module Makefile prior to importing this target.                 #
# NOTSOLO:    Flag whether makefile is running independently or being driven  #
#             by the main GAMMA makefile. This will be set by the main GAMMA  #
#             makefile (in PASSFLGS) or not if running SOLO.                  #
# MODULEDIR:  The is the test module directory. If the makefile is running    #
#             SOLO it will simply be the current directory.  If it is run as  #
#             part of a larger test source distribution it will be the full   #
#             path directory name (which will be $GAMMA/test or so)           #
# COPY2DIR:   Directory where the copied module files will be placed. This    #
#             will be relative if running SOLO or a full path name if not.    #
#                                                                             #
###############################################################################

testsrc: force
	@echo ""
	@echo " * Copying $(MODLABEL) Files To Temporary Directory"
	@if (test ! -z $(NOTSOLO)) \
	then \
	  echo "   From: $(MODULEDIR)"; \
	  echo "   To:   $(COPY2DIR)"; \
	  cp $(TESTDISTFILES) $(COPY2DIR); \
        else \
	  echo "   From: $(MODULEDIR)"; \
	  echo "   To:   $(COPY2DIR)"; \
	  cp $(TESTDISTFILES) $(COPY2DIR); \
          echo; \
          echo " * Finished Copying Files For $(MODLABEL) For Distribution"; \
	fi
	@echo " "

###############################################################################
#                                                                             #
#                                Target: testtar                              #
#                                                                             #
# This target is part of the Basics module test distribution target and is    #
# not meant to run solo. It takes all of the files to be released and tars    #
# them into a single file.  All released files are hopefully in a mock test   #
# directory from here that appears as in the appropriate $GAMMA/test/...      #
# directory but using $GAMMA as this current directory rather than the true   #
# GAMMA home directory.  Note that this only has an effect if the Makefile is #
# being run SOLO, i.e. not from the main test Makefile in $GAMMA. If it       #
# is not being run SOLO, i.e. it is being run as part of a large test source  #
# release, the earlier makefile will handle tarring up things.                #
#                                                                             #
# NOTSOLO:    Flag whether makefile is running independently or being driven  #
#             by the main GAMMA makefile. This will be set by the main GAMMA  #
#             makefile (in PASSFLGS) or not if running SOLO.                  #
# MODLABEL:   Name of module running the make. This will be declared in the   #
#             module Makefile prior to importing this target.                 #
# TSTTARFILE:    Tar file name, that produced upon test source distribution   #
#             of this specific module. Only used if running SOLO.             #
# TARPGM      Tar program to use.                                             #
# TARFLGS     Tar program flags to use.                                       #
# MODULEDIR:  The is the test module directory. If the makefile is running    #
#             SOLO it will simply be the current directory.  If it is run as  #
#             part of a larger test source distribution it will be the full   #
#             path directory name (which will be $GAMMA/test or so)           #
# COPY2DIR:   Directory where the copied module files will be placed. This    #
#             will be relative if running SOLO or a full path name if not.    #
#                                                                             #
###############################################################################

testtar: force
	@if (test -z $(NOTSOLO)) \
	then \
	  echo; \
	  echo " * Generating Tar File Of $(MODLABEL) Test Source Distribution"; \
	  echo " * The Tar File Will Be Named $(TSTTARFILE) In The Local Directory"; \
	fi
	@if (test -f $(TSTTARFILE) && test -z $(NOTSOLO)) \
	then \
	  echo ""; \
	  echo " * First Deleting Existing Tar File $(TSTTARFILE)"; \
          rm -f $(TSTTARFILE); \
	fi
	@if (test -z $(NOTSOLO)) \
	then \
	  echo ""; \
	  echo " * Making New TarFile From $(COPY2DIR)"; \
	  echo "   Corresponds to Tarring Directory $(MODULEDIR)"; \
	  $(TARPGM) $(TARFLGS) $(TSTTARFILE) $(COPY2DIR);\
	  echo "   New Tar File Is Complete: $(TSTTARFILE)"; \
	fi

###############################################################################
#                                                                             #
#                            Target: testgzip, testzip                        #
#                                                                             #
# This target is part of the Basics module test source distribution target &  #
# not meant to run solo. It takes the single zip file in this directory       #
# (generated from previous targets) from the distribution tar file using GNU  #
# zip.  The result will be a single source distribution file. Note that this  #
# only has an effect if the Makefile is being run SOLO, i.e. not from the     #
# main GAMMA Makefile in $GAMMA. If it is not being run SOLO, i.e. it is      #
# being run as part of a large test source release, the earlier makefile will #
# handle zipping up things.                                                   #
#                                                                             #
# NOTSOLO:     Flag whether makefile is running independently or being driven #
#              by the main GAMMA makefile. This will be set by the main GAMMA #
#              makefile (in PASSFLGS) or not if running SOLO.                 #
# MODLABEL:    Name of module running the make. This will be declared in the  #
#              module Makefile prior to importing this target.                #
# TSTTARFILE:  Tar file name, that produced upon test source distribution     #
#              of this specific module. Only used if running SOLO.            #
# TSTGZIPFILE: Zip file name, that produced upon test source distribution     #
#              of this specific module. Only used if running SOLO.            #
# GZIPPGM      Compression program that will work on TARFILE (usually gzip)   #
# GZIPFLGS     Compression program flags (usually nothing)                    #
# GZIPFILE:    Zip file name, that produced upon GAMMA test src distribution  #
#              of this module. Only used if running SOLO (usually x.tar.gz)   #
# ZIPPGM       Compression program that will work on temp. test src directory.#
#              This is usually zip (in unix) or pkzip (in windows)            #
# ZIPFLGS      Compression program flags (-p -r for pkzip)                    #
# ZIPFILE      Compressed source distribution file name made directly from    #
#              the temp directory hierarchy. For windows (usually x.zip)      #
# MODULEDIR:   The is the test module directory. If the makefile is running   #
#              SOLO it will simply be the current directory.  If it is run as #
#              part of a larger test source distribution it will be the full  #
#              path directory name (which will be $GAMMA/test or so)          #
#                                                                             #
###############################################################################

testgzip:
	@if (test -z $(NOTSOLO)) \
	then \
	  echo; \
	  echo " * Generating Zipped File Of $(MODLABEL) Test Source Distribution"; \
	  echo "   The Tar File $(TSTTARFILE) Will Be Compressed Using gzip"; \
	fi
	@if (test -f $(TSTGZIPFILE) && test -z $(NOTSOLO)) \
	then \
	  echo "   First Deleting Existing Zip File $(TSTGZIPFILE)"; \
          rm -f $(TSTGZIPFILE); \
	fi
	@if (test -z $(NOTSOLO)) \
	then \
	  echo "   Making New Zip File From $(TSTTARFILE)"; \
	  gzip $(TSTTARFILE); \
	  echo "   New Zip File Completed, Named $(TSTGZIPFILE) In Current Directory"; \
	  echo "   The Current Directory Is $(MODULEDIR)"; \
          echo ""; \
	fi

testzip:
	@if (test -z $(NOTSOLO)) \
	then \
	  echo; \
	  echo " * Generating Zipped File Of $(MODLABEL) Test Source Distribution"; \
	  echo "   The Directory $(COPY2BASE) Will Be Compressed Using $(ZIPPGM)"; \
	  $(ZIPPGM) $(ZIPFLGS) $(SRCZIPFILE) $(COPY2BASE); \
	  echo "   New Zip File Completed, Named $(SRCZIPFILE) In Current Directory"; \
	  echo "   The Current Directory Is $(MODULEDIR)"; \
	fi

###############################################################################
#                               Target: testclean                             #
#                                                                             #
# During a GAMMA test source distribution a mock directory is produced which  #
# mimicks the GAMMA directory hierarchy. It contains copies of the testing    #
# sources and any other files to be included in the distribution. This target #
# removes any temporary directories and files that have been produced in a    #
# GAMMA test source distribution. If this module's test sources have been     #
# specifically packaged then the copies made must be deleted.  In a full      #
# GAMMA source distrubution all temporary files are deleted in the main GAMMA #
# makefile, but that is NOT done here. This target section only deals with a  #
# single module distribution and won't do anything unless it is being run in  #
# SOLO mode.                                                                  #
#                                                                             #
# NOTSOLO:     Flag whether makefile is running independently or being driven #
#              by the main GAMMA makefile. This will be set by the main GAMMA #
#              makefile (in PASSFLGS) or not if running SOLO.                 #
# COPY2TEST:   This will be the "test" directory where the copied module      #
#              will be placed. It will be the one that is zipped up if the    #
#              module by itself is distributed (SOLO)                         #
#                                                                             #
###############################################################################

testclean:  force
	@if (test -z $(NOTSOLO)) \
	then \
          echo; \
          echo " * Cleaning Up Temporary Source Files And Any Directories"; \
          echo "   Removing Files Below $(COPY2TEST)"; \
          rm -rf $(COPY2TEST); \
	fi

###############################################################################
#                               Target: testvars                              #
#                                                                             #
# During a GAMMA test source distribution files are moved around, directories #
# created and destroyed. This can be dangerous if some variables in the       #
# Makefile are improperly set. At the vary least, the different targets will  #
# not work. At worst, important files are destroyed.  This target will simply #
# spit out all of the variables that are (overtly) used in the makefile. This #
# way one can have a look if things appear proper prior to running anything   #
# that does file/directory manipulations. This target is not normally run by  #
# a GAMMA user, it is more useful in building makefiles and debugging them.   #  
#                                                                             #
# NOTSOLO:     Flag whether makefile is running independently or being driven #
#              by the main GAMMA makefile. This will be set by the main GAMMA #
#              makefile (in PASSFLGS) or not if running SOLO.                 #
# MODLABEL:    Name of module running the make. This will be declared in the  #
#              module Makefile prior to importing this target.                #
# MODLABUN:    Underline of module name for module running the make. This     #
#              will be declared in the  module Makefile prior to including    #
#              this target.                                                   #
# MODULEDIR:   Absolute directory name of the test module.                    #
# FNAMES:      List of file names that are in the module distribution.        #
#              This will be set in the individual module makefile.            #
# PASSFLGS:  The flags that are passed from the main GAMMA makefile during    #  
#            recursion into this file. If running SOLO then this is set to be #
#            an empty string (done earlier in this makefile)                  #
#                                                                             #
###############################################################################
 
testvars:
	@echo
	@echo "   Variables Used ${MODLABEL} Module Test Distribution Makefile"
	@echo
	@if (test -z $(NOTSOLO)) \
	then \
          echo "  NOTSOLO       Make Being Run Directly            = $(NOTSOLO)"; \
	else \
          echo "  NOTSOLO       Make Being Run Recursively         = $(NOTSOLO)"; \
        fi
	@echo "  MODTESTCC     Name of the Module Test Program    = $(MODTESTCC)"
	@echo "  GAMMAPGM      Name of the GAMMA program script   = $(GAMMAPGM)"
	@echo "  MODTESTEX     Name of the Module Test Executable = $(MODTESTEX)"
	@echo "  MODLABEL      The Module Label for Output        = $(MODLABEL)"
	@echo "  MODLABUN      The Module Label Underline Output  = $(MODLABUN)"
	@echo "  TESTDIR       The GAMMA Test Directory Name      = $(TESTDIR)"
	@echo "  DIRNAME       The GAMMA Test Module Dir. Name    = $(DIRNAME)"
	@echo "  PROJECTPATH   Module Full Directory Name         = $(PROJECTPATH)"
	@echo "  MODULEDIR     Module Full Directory Name         = $(MODULEDIR)"
	@echo "  COPY2BASE     Distribution Temp Base Directory   = $(COPY2BASE)"
	@echo "  COPY2DIR      Distribution Module Temp Directory = $(COPY2DIR)"
	@for i in $(FNAMES); do \
	echo "  FNAMES        Included Module File Base Names    = $$i"; \
	done
	@for i in $(SUPPF); do \
	echo "  SUPPF         Supplemental Files To Be Included  = $$i"; \
	done
	@for i in $(TESTDISTFILES); do \
	echo "  TESTDISTFILES Full Copied File Names (Dist Dir)  = $$i"; \
	done
	@if (test -z $(NOTSOLO)) \
	then \
	  echo "  TSTTARFILE    Produced Distribution Tarfile      = $(TSTTARFILE)"; \
	  echo "  TSTGZIPFILE   Produced Distribution Zipfile      = $(TSTGZIPFILE)"; \
	  echo "  TSTZIPFILE    Produced Src Distribution Zipfile  = $(TSTZIPFILE)"; \
	  echo "  TSTLOCAL      Where Tar & Zip Files Reside       = $(TSTLOCAL)"; \	else \
	  if (test -z $(PASSFLGS)) \
	  then \
            echo "  PASSFLGS      Variables Imparted By Main Make    = $(PASSFLGS)"; \
	  else \
            echo "  PASSFLGS      Variables Imparted By Main Make:"; \
            for i in $(PASSFLGS); do \
              echo "   $$i"; \
            done \
	  fi \
	fi

